wwwwwwwwwwwwwwwwww PHP中静态方法和实例化方法的区别 wwwwwwwwwwwwwwwwwwwwwwwwwww
	总结：大家对这个问题都有一个共识：那就是实例化方法更多被使用和稳妥，静态方法少使用。
	有时候我们对静态方法和实例化方法会有一些误解。

	1、大家都以为“ 静态方法常驻内存，实例方法不是，所以静态方法效率高但占内存。”

	事实上，他们都是一样的，在加载时机和占用内存上，静态方法和实例方法是一样的，在类型第一次被使用时加载。调用的速度基本上没有差别。

	2、大家都以为“ 静态方法在堆上分配内存，实例方法在堆栈上”

	事实上所有的方法都不可能在堆或者堆栈上分配内存，方法作为代码是被加载到特殊的代码内存区域，这个内存区域是不可写的。

	方法占不占用更多内存，和它是不是static没什么关系。   
	  因为字段是用来存储每个实例对象的信息的，所以字段会占有内存，并且因为每个实例对象的状态都不一致（至少不能认为它们是一致的），所以每个实例对象的所以字段都会在内存中有一分拷贝，也因为这样你才能用它们来区分你现在操作的是哪个对象。   
	  但方法不一样，不论有多少个实例对象，它的方法的代码都是一样的，所以只要有一份代码就够了。因此无论是static还是non-static的方法，都只存在一份代码，也就是只占用一份内存空间。   
	  同样的代码，为什么运行起来表现却不一样？这就依赖于方法所用的数据了。主要有两种数据来源，一种就是通过方法的参数传进来，另一种就是使用class的成员变量的值……

	3、大家都以为“实例方法需要先创建实例才可以调用，比较麻烦，静态方法不用，比较简单”
	事实上如果一个方法与他所在类的实例对象无关，那么它就应该是静态的，而不应该把它写成实例方法。所以所有的实例方法都与实例有关，既然与实例有关，那么创建实例就是必然的步骤，没有麻烦简单一说。

	当然你完全可以把所有的实例方法都写成静态的，将实例作为参数传入即可，一般情况下可能不会出什么问题。

	从面向对象的角度上来说，在抉择使用实例化方法或静态方法时，应该根据是否该方法和实例化对象具有逻辑上的相关性，如果是就应该使用实例化对象  反之使用静态方法。这只是从面向对象角度上来说的。

	如果从线程安全、性能、兼容性上来看  也是选用实例化方法为宜。

	我们为什么要把方法区分为：静态方法和实例化方法 ？
	如果我们继续深入研究的话，就要脱离技术谈理论了。早期的结构化编程，几乎所有的方法都是“静态方法”，引入实例化方法概念是面向对象概念出现以后的事情了，区分静态方法和实例化方法不能单单从性能上去理解，创建c++,java,c#这样面向对象语言的大师引入实例化方法一定不是要解决什么性能、内存的问题，而是为了让开发更加模式化、面向对象化。这样说的话，静态方法和实例化方式的区分是为了解决模式的问题。
	
	
	
**********************************************************************************************	
* 字符串含有\r\n问题
**********************************************************************************************	
1、把含有\r\n字符串写入数组时，会出现无法写入，但没有报错，打印数组也没有元素
	
==============================================================================================



**********************************************************************************************	
* 
**********************************************************************************************	

	


==============================================================================================


**********************************************************************************************	
* 
**********************************************************************************************	

	


==============================================================================================

**********************************************************************************************	
* 
**********************************************************************************************	

	


==============================================================================================


