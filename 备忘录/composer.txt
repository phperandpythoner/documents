------------------ composer安装 -----------------
https://docs.phpcomposer.com/00-intro.html#Installation-*nix


------------------------------------------------------------------
https://pkg.phpcomposer.com/

镜像用法
有两种方式启用本镜像服务：

系统全局配置： 即将配置信息添加到 Composer 的全局配置文件 config.json 中。见“方法一”
单个项目配置： 将配置信息添加到某个项目的 composer.json 文件中。见“方法二”

方法一： 修改 composer 的全局配置文件（推荐方式）
打开命令行窗口（windows用户）或控制台（Linux、Mac 用户）并执行如下命令：

复制其中一个源
composer config -g repo.packagist composer https://packagist.phpcomposer.com

composer config -g repo.packagist composer https://packagist.laravel-china.org

composer config -g repo.packagist composer https://mirrors.aliyun.com/composer/

composer config -g repo.packagist composer https://mirrors.cloud.tencent.com/composer/


方法二： 修改当前项目的 composer.json 配置文件：
打开命令行窗口（windows用户）或控制台（Linux、Mac 用户），进入你的项目的根目录（也就是 composer.json 文件所在目录），执行如下命令：

复制
composer config repo.packagist composer https://packagist.phpcomposer.com
上述命令将会在当前项目中的 composer.json 文件的末尾自动添加镜像的配置信息（你也可以自己手工添加）：

复制
"repositories": {
    "packagist": {
        "type": "composer",
        "url": "https://packagist.phpcomposer.com"
    }
}
以 laravel 项目的 composer.json 配置文件为例，执行上述命令后如下所示（注意最后几行）：

复制
{
    "name": "laravel/laravel",
    "description": "The Laravel Framework.",
    "keywords": ["framework", "laravel"],
    "license": "MIT",
    "type": "project",
    "require": {
        "php": ">=5.5.9",
        "laravel/framework": "5.2.*"
    },
    "config": {
        "preferred-install": "dist"
    },
    "repositories": {
        "packagist": {
            "type": "composer",
            "url": "https://packagist.phpcomposer.com"
        }
    }
}
OK，一切搞定！试一下 composer install 来体验飞一般的速度吧！


--------------------- 镜像使用 -----------------------------------
镜像使用
$ composer config -g repo.packagist composer  镜像地址
$ composer clear cache
$ composer update || install

关闭镜像
composer config -g --unset repos.packagist


--------------------- 删除包 -----------------------------------
安装：composer require zircote/swagger-php
删除：composer remove zircote/swagger-php


*******************************************************************************************
*	composer镜像源  Composer 国内全量镜像大全
*******************************************************************************************	
资料：https://learnku.com/articles/30258


阿里云 Composer 全量镜像
镜像地址：https://mirrors.aliyun.com/composer/
官方地址：https://mirrors.aliyun.com/composer/index.html
说明：终于接上大厂水管了，还没来得急测，先更新，估计阿里云做的也不会差。

腾讯云 Composer 全量镜像
镜像地址：https://mirrors.cloud.tencent.com/composer/
官方地址：https://mirrors.cloud.tencent.com/composer
说明：若您使用腾讯云服务器，可以将源的域名从 mirrors.cloud.tencent.com 改为 mirrors.tencentyun.com，使用内网流量不占用公网流量，是不是非常良心。

华为 Composer 全量镜像
镜像地址：https://mirrors.huaweicloud.com/repository/php/
官方地址：https://mirrors.huaweicloud.com/
说明：华为 composer 镜像目前还不够完善，composer i 时会出现一些 bug ，而且同步速度也比较慢，好像并非是全量的。

Packagist / Composer 中国全量镜像
镜像地址：https://packagist.phpcomposer.com
官方地址：https://pkg.phpcomposer.com/
说明：Packagist 中国全量镜像是从 2014 年 9 月上线的，在安装和同步方面都比较完善，也一直是公益运营，但不知道目前这个镜像是否还是可用状态。

Composer / Packagist 中国全量镜像
镜像地址：https://php.cnpkg.org
官方地址：https://php.cnpkg.org/
说明：此 composer 镜像由安畅网络赞助，目前支持元数据、下载包全量代理，还是不错的，推荐使用。

Packagist / JP
镜像地址：https://packagist.jp
官方地址：https://packagist.jp
说明：这是日本开发者搭建的 composer 镜像，早上测了一下，感觉速度还不错。

Packagist Mirror
镜像地址：https://packagist.mirrors.sjtug.sjtu.edu.cn/
官方地址：https://mirrors.sjtug.sjtu.edu.cn/packagist/
说明：上海交通大学提供的 composer 镜像，稳定、快速、现代的镜像服务，推荐使用。

Laravel China Composer 全量镜像
镜像地址：https://packagist.laravel-china.org
官方地址：Laravel 论坛首页
说明：这个就不多了，国内 PHP 开发者使用量最多的 composer 镜像，同步速度快、稳定，推荐使用。


镜像源地址：
https://packagist.phpcomposer.com
https://packagist.laravel-china.org
http://pkg.phpcomposer.com/  
https://toran.reimu.io/  
http://packagist.cn/


*******************************************************************************************
*	composer常用命令
*******************************************************************************************	
composer查看全局设置
	composer config -gl
	
selfupdate
	更新 composer 本身，请经常执行 composer selfupdate 以保持 Composer 一直是最新版本。
	composer selfupdate
	等价于
	composer self-update
	dumpautoload
	当我们更改了 composer.json 文件中的 autoload 时，需要执行 composer dumpautoload，来让 autoload 立即生效。而不必执行 install 或 update 命令。

composer dumpautoload
	等价于
	composer dump-autoload
	dumpautoload 命令有两个常用的选项：
	--optimize (-o)： 转换 PSR-0/4 autoloading 到 classmap ，以获得更快的载入速度。这特别适用于生产环境，但可能需要一些时间来运行，因此它目前不是默认设置。
	--no-dev： 禁用 autoload-dev 规则。	
	
composer update
	如果你想更新你的依赖版本，或者你修改了 composer.json 中的依赖关系，想让 composer 按照 composer.json 文件中的定义执行更新操作，就用 update 命令。
	composer update
	
composer install
	composer install
	依据当前目录下的 composer.lock（锁文件） 或 composer.json 文件，所定义的依赖关系，安装依赖包。
	install 命令会先检查 composer.lock 锁文件是否存在，如果存在，它将下载 composer.lock 文件中指定的版本，而忽略 composer.json 文件中的定义。

composer search
	search 命令可以搜索远程的依赖包，通常它只搜索 packagist.org 上的包，你可以简单的输入你的搜索条件。
	composer search monolog
	--only-name (-N)选项， 仅针对指定的名称搜索（完全匹配）。

composer config
	config 命令允许你编辑 Composer 的一些基本设置，无论是本地的 composer.json 还是全局的 config.json 文件。
	查看 Composer 的配置信息：
	composer config --list
	语法：config [options] [setting-key] [setting-value1] ... [setting-valueN]
	setting-key 是配置选项的名称，setting-value1 是配置的值。可以使用数组作为配置的值（像 github-protocols），多个 setting-value 是允许的。
	例如，全局配置 Composer 的国内镜像：
	composer config -g repo.packagist composer https://packagist.phpcomposer.com
	选项：
	--global (-g)： 操作 $COMPOSER_HOME/config.json 全局配置文件。如果不指定该参数，此命令将影响当前项目的 composer.json 文件，或 --file 参数所指向的文件。
	--editor (-e)： 使用文本编辑器打开 composer.json 文件。默认情况下始终是打开当前项目的文件。当存在 --global 参数时，将会打开全局的 config.json 文件。
	--unset； 移除由 setting-key 指定的配置选项。
	--list (-l)： 查看当前配置选项的列表。当存在 --global 参数时，将会显示全局配置选项的列表。
	--file="..." (-f)：在一个指定的文件上操作，而不是 composer.json。它不能与 --global 参数一起使用。

	查看 Composer 的全局配置信息：
	composer config -g --list

composer clear-cache 清除composer缓存
	
	
*******************************************************************************************
*	配置composer的认证信息
*******************************************************************************************	
https://www.cnblogs.com/pheye/p/10479439.html	
编辑~/.composer/auth.json（如果没有该文件，就直接创建） 

{
    "bitbucket-oauth": {},
    "github-oauth": {},
    "gitlab-oauth": {
    },
    "gitlab-token": {
      "git.papamk.com": "<你的Private Token>"
    },
    "http-basic": {},
    "gitlab-domains":["git.papamk.com"]
}	


*******************************************************************************************
*	配置config.json (C:\Users\Administrator\AppData\Roaming\Composer)
*******************************************************************************************		
{
    "config": {
        "disable-tls": false,
		"secure-http": false,
		"gitlab-domains": [
			"gitlab.liuyang.com"
		]
		},
    "repositories": {
        "packagist": {
            "type": "composer",
            "url": "https://mirrors.aliyun.com/composer/"
        }
    }
}


修改 composer 全局 config  
因为 git.weshineapp.com 使用 HTTP 协议, 所以secure-http 要设为false
设置gitlab-domains 告诉 Composer 相应的域名可以使用 GitLab API 

参考网站：https://blog.csdn.net/panjiapengfly/article/details/81203821

*******************************************************************************************
*	composer解决http协议不能下载问题
*******************************************************************************************
https://getcomposer.org/doc/06-config.md#secure-http
secure-http ＃
默认为true。如果设置为true，则只允许通过Composer下载HTTPS URL。如果你真的绝对需要HTTP访问某些东西，那么你可以禁用它，但使用Let的加密来获得免费的SSL证书通常是一个更好的选择。
composer config -g secure-http false



*******************************************************************************************
*	[Composer\Downloader\TransportException]
  Invalid credentials for 'http://git.cqxiaokang.local/api/v4/projects/development%2Fphp%2Fbundles%2Fredissession-bundle', aborting.
*******************************************************************************************
Personal Access Tokens问题

1、需要在gitlab-》Access Tokens生成token
2、把生成的token配置到composer的auth.json文件
文件位置：C:\Users\Administrator\AppData\Roaming\Composer\auth.json
文件内容：
{
    "bitbucket-oauth": {},
    "github-oauth": {},
    "gitlab-oauth": {},
    "gitlab-token": {
		"git.cqxiaokang.local":"-an5yga9esUpsQ_pgm7-"
	},
    "http-basic": {}
}

*******************************************************************************************
*	composer require问题
*******************************************************************************************
问题一、
{
    "name": "xiaokang/system-sms-bundle",
    "type": "symfony-bundle",
	...
    "extra": {
        "branch-alias": {
            "dev-1.0": "1.0.x-dev"
        }
    }
}

错误的引入："xiaokang/system-sms-bundle": "1.0.*"
正确的引入："xiaokang/system-sms-bundle": "1.0.*-dev"


问题二、
 The requested package xiaokang/system-sms-bundle 2.0.* exists as xiaokang/system-sms-bundle[v1.0.3, v1.0.2, v1.0.1] but these are rejected by your constraint.
 解决："xiaokang/system-sms-bundle": "^1.0" ，在最新的分支上加上标签，如：分支2.0，新增标签v1.0.4，然后执行composer update
 

*******************************************************************************************
*	composer 拉取gitlab项目进入第三方目录
*******************************************************************************************
1、在第三方项目根目录新建composer.json文件 
{
  "name": "exam/exam-model",
  "license": "",
  "description": "exam model",
  "type": "library",
  "authors": [],
  "require": {
    "php": "^7.2.0"
  },
  "autoload": {
    "psr-4": {
      "Exam\\Model\\": "src/"
    }
  },
  "extra": {
    "branch-alias": {
      "dev-1.0": "1.0.x-dev"
    }
  }
}

2、编辑项目composer.json文件，新增 "exam/exam-model": "1.0.*-dev" 和 repositories内容
{
    "require": {
        "exam/exam-model": "1.0.*-dev"
    },
    "repositories": [
        {
            "type": "gitlab",
            "url": "http://gitlab.liuyang.com/exam/exam-model.git"
        }
    ]
}

3、composer update 更新拉取项目