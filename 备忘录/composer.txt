https://pkg.phpcomposer.com/

镜像用法
有两种方式启用本镜像服务：

系统全局配置： 即将配置信息添加到 Composer 的全局配置文件 config.json 中。见“方法一”
单个项目配置： 将配置信息添加到某个项目的 composer.json 文件中。见“方法二”

方法一： 修改 composer 的全局配置文件（推荐方式）
打开命令行窗口（windows用户）或控制台（Linux、Mac 用户）并执行如下命令：

复制其中一个源
composer config -g repo.packagist composer https://packagist.phpcomposer.com

composer config -g repo.packagist composer https://packagist.laravel-china.org


方法二： 修改当前项目的 composer.json 配置文件：
打开命令行窗口（windows用户）或控制台（Linux、Mac 用户），进入你的项目的根目录（也就是 composer.json 文件所在目录），执行如下命令：

复制
composer config repo.packagist composer https://packagist.phpcomposer.com
上述命令将会在当前项目中的 composer.json 文件的末尾自动添加镜像的配置信息（你也可以自己手工添加）：

复制
"repositories": {
    "packagist": {
        "type": "composer",
        "url": "https://packagist.phpcomposer.com"
    }
}
以 laravel 项目的 composer.json 配置文件为例，执行上述命令后如下所示（注意最后几行）：

复制
{
    "name": "laravel/laravel",
    "description": "The Laravel Framework.",
    "keywords": ["framework", "laravel"],
    "license": "MIT",
    "type": "project",
    "require": {
        "php": ">=5.5.9",
        "laravel/framework": "5.2.*"
    },
    "config": {
        "preferred-install": "dist"
    },
    "repositories": {
        "packagist": {
            "type": "composer",
            "url": "https://packagist.phpcomposer.com"
        }
    }
}
OK，一切搞定！试一下 composer install 来体验飞一般的速度吧！



--------------------- 删除包 -----------------------------------
安装：composer require zircote/swagger-php
删除：composer remove zircote/swagger-php


*******************************************************************************************
*	composer常用命令
*******************************************************************************************	
composer查看全局设置
	composer config -gl
	
selfupdate
	更新 composer 本身，请经常执行 composer selfupdate 以保持 Composer 一直是最新版本。
	composer selfupdate
	等价于
	composer self-update
	dumpautoload
	当我们更改了 composer.json 文件中的 autoload 时，需要执行 composer dumpautoload，来让 autoload 立即生效。而不必执行 install 或 update 命令。

composer dumpautoload
	等价于
	composer dump-autoload
	dumpautoload 命令有两个常用的选项：
	--optimize (-o)： 转换 PSR-0/4 autoloading 到 classmap ，以获得更快的载入速度。这特别适用于生产环境，但可能需要一些时间来运行，因此它目前不是默认设置。
	--no-dev： 禁用 autoload-dev 规则。	
	
composer update
	如果你想更新你的依赖版本，或者你修改了 composer.json 中的依赖关系，想让 composer 按照 composer.json 文件中的定义执行更新操作，就用 update 命令。
	composer update
	
composer install
	composer install
	依据当前目录下的 composer.lock（锁文件） 或 composer.json 文件，所定义的依赖关系，安装依赖包。
	install 命令会先检查 composer.lock 锁文件是否存在，如果存在，它将下载 composer.lock 文件中指定的版本，而忽略 composer.json 文件中的定义。

composer search
	search 命令可以搜索远程的依赖包，通常它只搜索 packagist.org 上的包，你可以简单的输入你的搜索条件。
	composer search monolog
	--only-name (-N)选项， 仅针对指定的名称搜索（完全匹配）。

composer config
	config 命令允许你编辑 Composer 的一些基本设置，无论是本地的 composer.json 还是全局的 config.json 文件。
	查看 Composer 的配置信息：
	composer config --list
	语法：config [options] [setting-key] [setting-value1] ... [setting-valueN]
	setting-key 是配置选项的名称，setting-value1 是配置的值。可以使用数组作为配置的值（像 github-protocols），多个 setting-value 是允许的。
	例如，全局配置 Composer 的国内镜像：
	composer config -g repo.packagist composer https://packagist.phpcomposer.com
	选项：
	--global (-g)： 操作 $COMPOSER_HOME/config.json 全局配置文件。如果不指定该参数，此命令将影响当前项目的 composer.json 文件，或 --file 参数所指向的文件。
	--editor (-e)： 使用文本编辑器打开 composer.json 文件。默认情况下始终是打开当前项目的文件。当存在 --global 参数时，将会打开全局的 config.json 文件。
	--unset； 移除由 setting-key 指定的配置选项。
	--list (-l)： 查看当前配置选项的列表。当存在 --global 参数时，将会显示全局配置选项的列表。
	--file="..." (-f)：在一个指定的文件上操作，而不是 composer.json。它不能与 --global 参数一起使用。

	
*******************************************************************************************
*	配置composer的认证信息
*******************************************************************************************	
https://www.cnblogs.com/pheye/p/10479439.html	
编辑~/.composer/auth.json（如果没有该文件，就直接创建） 

{
    "bitbucket-oauth": {},
    "github-oauth": {},
    "gitlab-oauth": {
    },
    "gitlab-token": {
      "git.papamk.com": "<你的Private Token>"
    },
    "http-basic": {},
    "gitlab-domains":["git.papamk.com"]
}	
	
	
*******************************************************************************************
*	composer解决http协议不能下载问题
*******************************************************************************************
https://getcomposer.org/doc/06-config.md#secure-http
secure-http ＃
默认为true。如果设置为true，则只允许通过Composer下载HTTPS URL。如果你真的绝对需要HTTP访问某些东西，那么你可以禁用它，但使用Let的加密来获得免费的SSL证书通常是一个更好的选择。
composer config -g secure-http false