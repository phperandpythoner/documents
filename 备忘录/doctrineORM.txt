------------------------------------------------------------------
------------ 安装 
------------------------------------------------------------------
	mkdir doctrineORM
	touch composer.json
	vi composer.json
		{
			"require": {
				"doctrine/orm": "^2.6.2"
			},
			"autoload": {
				"psr-0": {"": "src/"}
			}
		}
	composer install


------------------------------------------------------------------
------------ Doctrine Mapping Types
https://www.doctrine-project.org/projects/doctrine-orm/en/latest/reference/basic-mapping.html#identifier-generation-strategies
------------------------------------------------------------------
string: Type that maps an SQL VARCHAR to a PHP string.
integer: Type that maps an SQL INT to a PHP integer.
smallint: Type that maps a database SMALLINT to a PHP integer.
bigint: Type that maps a database BIGINT to a PHP string.
boolean: Type that maps an SQL boolean or equivalent (TINYINT) to a PHP boolean.
decimal: Type that maps an SQL DECIMAL to a PHP string.
date: Type that maps an SQL DATETIME to a PHP DateTime object.
date_immutable: Type that maps an SQL DATETIME to a PHP DateTimeImmutable object.
time: Type that maps an SQL TIME to a PHP DateTime object.
time_immutable: Type that maps an SQL TIME to a PHP DateTimeImmutable object.
datetime: Type that maps an SQL DATETIME/TIMESTAMP to a PHP DateTime object with the current timezone.
datetimetz: Type that maps an SQL DATETIME/TIMESTAMP to a PHP DateTime object with the timezone specified in the value from the database.
datetime_immutable: Type that maps an SQL DATETIME/TIMESTAMP to a PHP DateTimeImmutable object with the current timezone.
datetimetz_immutable: Type that maps an SQL DATETIME/TIMESTAMP to a PHP DateTimeImmutable object with the timezone specified in the value from the database.
dateinterval: Type that maps an interval to a PHP DateInterval object
text: Type that maps an SQL CLOB to a PHP string.
object: Type that maps an SQL CLOB to a PHP object using serialize() and unserialize()
array: Type that maps an SQL CLOB to a PHP array using serialize() and unserialize()
simple_array: Type that maps an SQL CLOB to a one-dimensional PHP array using implode() and explode(), with a comma as delimiter. IMPORTANT Only use this type if you are sure that your values cannot contain a ",".
json_array: Type that maps an SQL CLOB to a PHP array using json_encode() and json_decode(). This one has been deprecated in favor of json type.
json: Type that maps an SQL CLOB to a PHP array using json_encode() and json_decode(). An empty value is correctly represented as null
float: Type that maps an SQL Float (Double Precision) to a PHP double. IMPORTANT: Works only with locale settings that use decimal points as separator.
guid: Type that maps a database GUID/UUID to a PHP string. Defaults to varchar but uses a specific type if the platform supports it.
blob: Type that maps an SQL BLOB to a PHP resource stream
binary: Type that maps an SQL binary to a PHP resource stream

------------------------------------------------------------------
------------ 子查询 addSelect
------------------------------------------------------------------
$em = $this->getEntityManager();
$query = $em->createQueryBuilder();
$list = $query->select('books.id, books.nextId, books.serialNumber, books.accountId, books.type, books.amount, books.category, books.originNo, books.originalBalance, books.latestBalance, books.thirdPartyType, books.state, books.createDatetime',
	'a.userId',
	'u.userName, u.realName')
	->addSelect("(".$em->createQueryBuilder()->select('ui.userName')->from(UserInfo::class, 'ui')->andWhere($query->expr()->eq('ui.id', 'u.pid'))->getQuery()->getDQL().") AS recommand_username")
	->from(AccountBooks::class, 'books')
	->innerJoin(Account::class, 'a', Expr\Join::WITH, 'a.id = books.accountId')
	->innerJoin(UserInfo::class, 'u', Expr\Join::WITH, 'u.id = a.userId')
	->andWhere($query->expr()->eq('books.category', ':category'))
	->setParameter('category', AccountBooks::WITHDRAWAL_CATEGORY)
			
			
------------------------------------------------------------------
------------ 注释参考 实例解析
------------------------------------------------------------------
多对多，双向
/** @ORM\Entity */
class User
{
    /**
     * @ORM\Id
     * @ORM\Column(type="integer")
     * @ORM\GeneratedValue
     */
    private $id;

    /**
     * Many Users have Many Groups.
     * @ORM\ManyToMany(targetEntity="Group", inversedBy="users")
     * @ORM\JoinTable(name="users_groups")
     */
    private $groups;

    public function __construct() {
        $this->groups = new \Doctrine\Common\Collections\ArrayCollection();
    }

    // ...
}

/** @ORM\Entity */
class Group
{
    /**
     * @ORM\Id
     * @ORM\Column(type="integer")
     * @ORM\GeneratedValue
     */
    private $id;
    /**
     * Many Groups have Many Users.
     * @ORM\ManyToMany(targetEntity="User", mappedBy="groups")
     */
    private $users;

    public function __construct() {
        $this->users = new \Doctrine\Common\Collections\ArrayCollection();
    }

    // ...
}

sql:
     CREATE TABLE User (id INT AUTO_INCREMENT NOT NULL, PRIMARY KEY(id)) DEFAULT CHARACTER SET utf8 COLLATE utf8_unicode_ci ENGINE = InnoDB;
     CREATE TABLE users_groups (user_id INT NOT NULL, group_id INT NOT NULL, INDEX IDX_FF8AB7E0A76ED395 (user_id), INDEX IDX_FF8AB7E0FE54D947 (group_id), PRIMARY KEY(user_id, group_id)) DEFAULT CHARACTER SET utf8 COLLATE utf8_unicode_ci ENGINE = InnoDB;
     CREATE TABLE `Group` (id INT AUTO_INCREMENT NOT NULL, PRIMARY KEY(id)) DEFAULT CHARACTER SET utf8 COLLATE utf8_unicode_ci ENGINE = InnoDB;
     
     ALTER TABLE users_groups ADD CONSTRAINT FK_FF8AB7E0A76ED395 FOREIGN KEY (user_id) REFERENCES User (id) ON DELETE CASCADE;
     ALTER TABLE users_groups ADD CONSTRAINT FK_FF8AB7E0FE54D947 FOREIGN KEY (group_id) REFERENCES `Group` (id) ON DELETE CASCADE;

------------------------------------------------------------------
------------ 注释参考 
https://www.doctrine-project.org/projects/doctrine-orm/en/latest/reference/annotations-reference.html
------------------------------------------------------------------

@Column
	俗称表的字段,这个符号标记一个注解的实例变量为持久化的,它必须是在php文档快注释里的实例变量.这个变量里存储的任何值都会被保存起来,然后作为一个实体的生命周期的一部分从数据库里加载.

	@Column中必填的属性:

		type : doctrine中的类型,在php跟数据库呈现之间转换

	@Column中可选的属性:

		name : 这个属性对应了数据库中字段名,如果不定义 那么表字段名应该跟这个注解的变量名是一样的

		length : 在string字符串类型的字段中 表示了数据库中字符串的最长长度.Doctrine本身不会验证字符串的长度.

		precision : 用于十进制中表示的精度 ( 仅用于十进制的字段 )

		scale : 十进制数值的范围 (仅用于十进制字段)

		unique : 意如其名 是否是唯一 值只有true false,决定字段是否应该是唯一的

		nullable : 是否能为NULL 跟数据库为空选项一样

		columnDefinition :
		
		options: Array of additional options:
			default: The default value to set for the column if no value is supplied.
			unsigned: Boolean value to determine if the column should be capable of representing only non-negative integers (applies only for integer column and might not be supported by all vendors).
			fixed: Boolean value to determine if the specified length of a string column should be fixed or varying (applies only for string/binary column and might not be supported by all vendors).
			comment: The comment of the column in the schema (might not be supported by all vendors).
			collation: The collation of the column (only supported by Drizzle, Mysql, PostgreSQL>=9.1, Sqlite and SQLServer).
			check: Adds a check constraint type to the column (might not be supported by all vendors).