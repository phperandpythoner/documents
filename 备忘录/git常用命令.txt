 本地代码没有关联远程仓库时，使用以下步奏，并提交代码
 git init
 git remote add origin http://git.cqxiaokang.local/php/yund2/contract-management/contract-sign-h5.git // 使用的是http协议，不要使用ssh协议
 git status
 git add .
 git commit -m 'init'
 git push origin master:1.0


**************************************************************************************************************
本地分支关联远程分支，如果远程分支没有则创建
git push --set-upstream origin master

**************************************************************************************************************
拉取或推送远程分支
 git pull origin 1.0
 git push origin HEAD:1.0

******************************************** 更换git源 ******************************************************************
移除源
git remote remove origin
添加新源
git remote add origin git@git..gitxxx.com:fei/stic.git
git pull
git branch --set-upstream master origin/master
git pull origin master??
如果报histories什么的错误，就执行下面的
git pull origin master --allow-unrelated-histories


实战记录
 git remote remove origin

 git remote add origin http://git.cqxiaokang.local/php/yund2/contract-management/contract-h5.git

 git pull origin 1.0

 git branch --set-upstream-to master origin/1.0

 git pull origin 1.0
 git add .
 git commit -m "111"
 git push origin HEAD:1.0



***************************************** 常见错误 ******************************************************************
fatal: refusing to merge unrelated histories
	其实这个问题是因为 两个 根本不相干的 git 库， 一个是本地库， 一个是远端库， 然后本地要去推送到远端， 远端觉得这个本地库跟自己不相干， 所以告知无法合并
解决：
	git pull origin master --allow-unrelated-histories #加上后面这个选项允许不相关历史提交（master为远程分支名）

**************************************************************************************************************



******************************************** git tag创建、远程推送、回退以及强推 ******************************************************************
https://blog.csdn.net/QH_JAVA/article/details/77979622

一、给本地仓库分支打轻量级tag标签

1、在Git中打标签非常简单，首先，切换到需要打标签的分支上：
2、然后，敲命令git tag <name>就可以打一个新标签：
	$ git tag v1.0
3、可以用命令git tag查看所有标签：
4、默认标签是打在最新提交的commit上的。有时候，如果忘了打标签，比如，现在已经是周五了，但应该在周一打的标签没有打，怎么办？方法是找到历史提交的commit id，然后打上就可以了：
	$ git log --pretty=oneline --abbrev-commit
	
	aaff087 (HEAD -> devwhd, tag: v1.o, origin/devwhd) url add
	c603e59 aaa
	ae636a8 aaaa
	471fd27 url update

5、比方说要对url update这次提交打标签，它对应的commit id是471fd27，敲入命令：
	$ git  tag v0.9 471fd27
6、再用命令git tag查看标签：
	注意，标签不是按时间顺序列出，而是按字母排序的。可以用git show <tagname>查看标签信息：
	
二、上面我们打的tag是轻量级的也就是一般的tag没有注释，下面我们看看有注释的标签
1、创建带有说明的标签，用-a指定标签名，-m指定说明文字：
	$ git tag -a v0.1 -m "version 0.1 released push url" d5a65e9
2、用命令git show <tagname>可以看到说明文字：
这样我们就能看到我们添加的tag以及相关注释，比如这里我们添加的注释是version 0.1 released push url
ok 到这里我们就给相关分支的某些提交版本添加了tag，但是git tag命令是对本地仓库分支加的标签，为了能把标签同步到远程服务器，我们需要做如下操作

三、把本地仓库分支tag推送到远程服务器

默认情况下，git push并不会把tag标签传送到远端服务器上，只有通过显式命令才能分享标签到远端仓库。

1.push单个tag，命令格式为：

git push origin [tagname]

$ git push origin tag_20170908
将本地 tag_20170908的tag推送到远端服务器
2.push所有tag，命令格式为：

git push [origin] --tags

git push --tags
或
git push origin --tags

当远程有多个服务的时候远程服务名称是必须的，而如果远程只有一个远程服务则远程服务名称可以省略。
ok 到这里添加 tag标签push tag标签结束……

以上命令经检验通过，如果不起作用，请在Git控制台上确认你的账号是否有权限推送Tag。这一点很重要，因为这个原因，我有过一段时间很抓狂。
......



***************************************** 常用命令 ******************************************************************

新建一个分支，并切换到该分支
git checkout -b test{本地分支名称} origin/test{远程分支}

查看日志
git log --oneline
git log --oneline --graph

提交到暂存区
git add filename

git add .

提交（非新文件使用）
git commit -am "" 

保留合并信息
git merge --no-ff -m "message" {分支}

将文件给推到服务器上 
git push origin {分支}

git clone -b release  地址
例如：git clone -b release  http://yang.liu@code.anlaa.com/web/php/static.git

git branch -D 只能删除本地分支
git branch -d -r 可以删除本地和远程


//************************************
//创建本地分支test与远程test关联
git checkout -b test origin/test


#关联远程分支
#git branch --set-upstream-to={远程分支} {本地分支}
#eg:git branch --set-upstream-to=origin/test test


git如何去除rebaseing状态
如果想要放弃当前rebase操作，用
git rebase --abort
如果冲突已经解决，先add冲突文件，之后
git rebase --continue



git fetch --all
git reset --hard origin/test


撤销当前分支编辑的文件
 git checkout .




恢复到上一个版本：
git reset --hard HEAD^
恢复到某个版本号commit_id
git reset --hard commit_id
如：
	git reset --hard b2b8583256a17d16e0f4714068e00132ea61b877

	
查看日志
git log
查看日志主要信息
git log --pretty=oneline
 

命令可以查看工作区和版本库里面最新版本的区别
	git diff HEAD -- readme.txt(文件名)

丢弃工作区的修改
	git checkout -- file
	命令git checkout -- readme.txt意思就是，把readme.txt文件在工作区的修改全部撤销，这里有两种情况：
	一种是readme.txt自修改后还没有被放到暂存区，现在，撤销修改就回到和版本库一模一样的状态；
	一种是readme.txt已经添加到暂存区后，又作了修改，现在，撤销修改就回到添加到暂存区后的状态。




























一、新建代码库

# 在当前目录新建一个Git代码库
$ git init

# 新建一个目录，将其初始化为Git代码库
$ git init [project-name]

# 下载一个项目和它的整个代码历史
$ git clone [url]
二、配置
Git的设置文件为.gitconfig，它可以在用户主目录下（全局配置），也可以在项目目录下（项目配置）。

# 显示当前的Git配置
$ git config --list

# 编辑Git配置文件
$ git config -e [--global]

# 设置提交代码时的用户信息
$ git config [--global] user.name "[name]"
$ git config [--global] user.email "[email address]"
三、增加/删除文件

# 添加指定文件到暂存区
$ git add [file1] [file2] ...

# 添加指定目录到暂存区，包括子目录
$ git add [dir]

# 添加当前目录的所有文件到暂存区
$ git add .

# 添加每个变化前，都会要求确认
# 对于同一个文件的多处变化，可以实现分次提交
$ git add -p

# 删除工作区文件，并且将这次删除放入暂存区
$ git rm [file1] [file2] ...

# 停止追踪指定文件，但该文件会保留在工作区
$ git rm --cached [file]

# 改名文件，并且将这个改名放入暂存区
$ git mv [file-original] [file-renamed]
四、代码提交

# 提交暂存区到仓库区
$ git commit -m [message]

# 提交暂存区的指定文件到仓库区
$ git commit [file1] [file2] ... -m [message]

# 提交工作区自上次commit之后的变化，直接到仓库区
$ git commit -a

# 提交时显示所有diff信息
$ git commit -v

# 使用一次新的commit，替代上一次提交
# 如果代码没有任何新变化，则用来改写上一次commit的提交信息
$ git commit --amend -m [message]

# 重做上一次commit，并包括指定文件的新变化
$ git commit --amend [file1] [file2] ...
五、分支

# 列出所有本地分支
$ git branch

# 列出所有远程分支
$ git branch -r

# 列出所有本地分支和远程分支
$ git branch -a

# 新建一个分支，但依然停留在当前分支
$ git branch [branch-name]

# 新建一个分支，并切换到该分支
$ git checkout -b [branch]

# 新建一个分支，指向指定commit
$ git branch [branch] [commit]

# 新建一个分支，与指定的远程分支建立追踪关系
$ git branch --track [branch] [remote-branch]

# 切换到指定分支，并更新工作区
$ git checkout [branch-name]

# 切换到上一个分支
$ git checkout -

# 建立追踪关系，在现有分支与指定的远程分支之间
$ git branch --set-upstream [branch] [remote-branch]

# 合并指定分支到当前分支
$ git merge [branch]

# 选择一个commit，合并进当前分支
$ git cherry-pick [commit]

# 删除分支
$ git branch -d [branch-name]

# 删除远程分支
$ git push origin --delete [branch-name]
$ git branch -dr [remote/branch]
六、标签

# 列出所有tag
$ git tag

# 新建一个tag在当前commit
$ git tag [tag]

# 新建一个tag在指定commit
$ git tag [tag] [commit]

# 删除本地tag
$ git tag -d [tag]

# 删除远程tag
$ git push origin :refs/tags/[tagName]

# 查看tag信息
$ git show [tag]

# 提交指定tag
$ git push [remote] [tag]

# 提交所有tag
$ git push [remote] --tags

# 新建一个分支，指向某个tag
$ git checkout -b [branch] [tag]
七、查看信息

# 显示有变更的文件
$ git status

# 显示当前分支的版本历史
$ git log

# 显示commit历史，以及每次commit发生变更的文件
$ git log --stat

# 搜索提交历史，根据关键词
$ git log -S [keyword]

# 显示某个commit之后的所有变动，每个commit占据一行
$ git log [tag] HEAD --pretty=format:%s

# 显示某个commit之后的所有变动，其"提交说明"必须符合搜索条件
$ git log [tag] HEAD --grep feature

# 显示某个文件的版本历史，包括文件改名
$ git log --follow [file]
$ git whatchanged [file]

# 显示指定文件相关的每一次diff
$ git log -p [file]

# 显示过去5次提交
$ git log -5 --pretty --oneline

# 显示所有提交过的用户，按提交次数排序
$ git shortlog -sn

# 显示指定文件是什么人在什么时间修改过
$ git blame [file]

# 显示暂存区和工作区的差异
$ git diff

# 显示暂存区和上一个commit的差异
$ git diff --cached [file]

# 显示工作区与当前分支最新commit之间的差异
$ git diff HEAD

# 显示两次提交之间的差异
$ git diff [first-branch]...[second-branch]

# 显示今天你写了多少行代码
$ git diff --shortstat "@{0 day ago}"

# 显示某次提交的元数据和内容变化
$ git show [commit]

# 显示某次提交发生变化的文件
$ git show --name-only [commit]

# 显示某次提交时，某个文件的内容
$ git show [commit]:[filename]

# 显示当前分支的最近几次提交
$ git reflog
八、远程同步

# 下载远程仓库的所有变动
$ git fetch [remote]

# 显示所有远程仓库
$ git remote -v

# 显示某个远程仓库的信息
$ git remote show [remote]

# 增加一个新的远程仓库，并命名
$ git remote add [shortname] [url]

# 取回远程仓库的变化，并与本地分支合并
$ git pull [remote] [branch]
#比如当前分支featurn_1
eg:git pull origin master:featurn_1

# 上传本地指定分支到远程仓库
$ git push [remote] [branch]

# 强行推送当前分支到远程仓库，即使有冲突
$ git push [remote] --force

# 推送所有分支到远程仓库
$ git push [remote] --all
九、撤销

# 恢复暂存区的指定文件到工作区
$ git checkout [file]

# 恢复某个commit的指定文件到暂存区和工作区
$ git checkout [commit] [file]

# 恢复暂存区的所有文件到工作区
$ git checkout .

# 重置暂存区的指定文件，与上一次commit保持一致，但工作区不变
$ git reset [file]

# 重置暂存区与工作区，与上一次commit保持一致
$ git reset --hard

# 重置当前分支的指针为指定commit，同时重置暂存区，但工作区不变
$ git reset [commit]

# 重置当前分支的HEAD为指定commit，同时重置暂存区和工作区，与指定commit一致
$ git reset --hard [commit]

# 重置当前HEAD为指定commit，但保持暂存区和工作区不变
$ git reset --keep [commit]

# 新建一个commit，用来撤销指定commit
# 后者的所有变化都将被前者抵消，并且应用到当前分支
$ git revert [commit]

# 暂时将未提交的变化移除，稍后再移入
$ git stash
$ git stash pop
十、其他

# 生成一个可供发布的压缩包
$ git archive