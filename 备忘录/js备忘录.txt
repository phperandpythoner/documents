jquery ajax 局部刷新 刷新代码片段里面的内容ID标签的一切
$("#content").load(location.href+" #content>*","");

***************************************************************************

刷新
window.location.reload()刷新当前页面. 
parent.location.reload()刷新父亲对象（用于框架） 
opener.location.reload()刷新父窗口对象（用于单开窗口） 
top.location.reload()刷新最顶端对象（用于多开窗口）

***************************************************************************

返回上一页
<script>window.history.back(-1); </script>
***************************************************************************
一：JS 重载页面，本地刷新,返回上一页
	<a href="javascript:history.go(-1)">返回上一页</a>
	<a href="javascript:location.reload()">重载页面，本地刷新</a>
	<a href="javascript:history.go(-1);location.reload()">返回上一页重载页面，本地刷新</a>

返回前二页并刷新的JS代码应该怎样写。
	history.go(-2);
	location.reload();

***************************************************************************
Javascript刷新页面的几种方法：

1    history.go(0)
2    location.reload()
3    location=location
4    location.assign(location)
5    document.execCommand('Refresh')
6    window.navigate(location)
7    location.replace(location)
8    document.URL=location.href

***************************************************************************
自动刷新页面的方法:
	1.页面自动刷新：把如下代码加入<head>区域中
	<meta http-equiv="refresh" content="20"> 
	其中20指每隔20秒刷新一次页面.

	2.页面自动跳转：把如下代码加入<head>区域中
	<meta http-equiv="refresh" content="20;url=http://www.javaeye.com"> 
	其中20指隔20秒后跳转到http://www.javaeye.com页面

	3.页面自动刷新js版
	<script language="JavaScript">
	function myrefresh()
	{
		   window.location.reload();
	}
	setTimeout('myrefresh()',1000); //指定1秒刷新一次
	</script>

***************************************************************************


***************************************************************************
Javascript事件preventDefault,stopPropagation及return false的区别
https://segmentfault.com/a/1190000008227026

***************************************************************************

********************** jQuery封装的ajax请求数据及状态码 *****************************************************
success: function (response,status,xhr) {
	console.log(response);	//服务器返回的信息
	console.log(status);	//服务器返回的信息
	console.log(xhr.status);	//状态码,   要看其他的直接 输出 xhr 就行
	console.log(xhr.getAllResponseHeaders()); //响应头部
},

状态码对应的请求方法（大概描述）
200		GET,PUT
201		POST
204		DELETE



xhr.readystate 状态码
	0：unsend  //当前请求还未发送
	1：opened //URL地址已经打开
	2：headers_received //响应头信息已经接收
	3：loading // 主要的返回数据正在服务器进行准备处理
	4：done //响应主体的内容已经成功返回客户端

xhr.status 服务器状态码
	200及以2开头的：成功（响应的主体已经成功返回客户端）
	301：永久重定向/转移
	302:临时重定向/转移
	304：本次获取的内容是读取的缓存
	400：客户端->服务器的参数错误
	401：无权限访问
	404：访问地址不存在
	500：未知的服务器错误
	501：服务器超负荷

什么是readyState
　　readyState是XMLHttpRequest对象的一个属性，用来标识当前XMLHttpRequest对象处于什么状态。
　　readyState总共有5个状态值，分别为0~4，每个值代表了不同的含义，如下表所示：
  0    未初始化状态：此时，已经创建了一个XMLHttpRequest对象
  1  准备发送状态：此时，已经调用了XMLHttpRequest对象的open方法，并且XMLHttpRequest对象已经准备好将一个请求发送到服务器端
  2  已经发送状态：此时，已经通过send方法把一个请求发送到服务器端，但是还没有收到一个响应
  3  正在接收状态：此时，已经接收到HTTP响应头部信息，但是消息体部分还没有完全接收到
  4  完成响应状态：此时，已经完成了HTTP响应的接收
 
什么是status
　　status是XMLHttpRequest对象的一个属性，表示响应的HTTP状态码。
　　在HTTP1.1协议下，HTTP状态码总共可分为5大类，如下表所示：
  1XX    服务器收到请求，需要继续处理。例如101状态码，表示服务器将通知客户端使用更高版本的HTTP协议。
  2XX    请求成功。例如200状态码，表示请求所希望的响应头或数据体将随此响应返回。
  3XX    重定向。例如302状态码，表示临时重定向，请求将包含一个新的URL地址，客户端将对新的地址进行GET请求。
  4XX    客户端错误。例如404状态码，表示客户端请求的资源不存在。
  5XX    服务器错误。例如500状态码，表示服务器遇到了一个未曾预料的情况，导致了它无法完成响应，一般来说，这个问题会在程序代码出错时出现。


***************************************************************************
Jquery获取radio选中值实例总结
	获取选中值，三种方法都可以
		$('input:radio:checked').val()
		$("input[type='radio']:checked").val();
		$("input[name='rd']:checked").val();
	设置第一个Radio为选中值
		$('input:radio:first').attr('checked', 'checked');
		$('input:radio:first').attr('checked', 'true');
	设置最后一个Radio为选中值
		$('input:radio:last').attr('checked', 'checked');
		$('input:radio:last').attr('checked', 'true');
https://www.jb51.net/article/154831.htm

********************************* JavaScript正则表达式 ******************************************
身份证：/(^\d{15}$)|(^\d{18}$)|(^\d{17}(\d|X|x)$)/
手机号：/^[1][3,4,5,7,8][0-9]{9}$/




JavaScript使用正则表达式：
var identityCardReg = /(^\d{15}$)|(^\d{18}$)|(^\d{17}(\d|X|x)$)/;
//identityCardReg.test(_identityCard // return true or false
if (!identityCardReg.test(_identityCard)){
	alert(false);
	return false;
}

验证银行卡号方法:
	//luhn校验规则：16位银行卡号（19位通用）:
    // 1.将未带校验位的 15（或18）位卡号从右依次编号 1 到 15（18），位于奇数位号上的数字乘以 2。
    // 2.将奇位乘积的个十位全部相加，再加上所有偶数位上的数字。
    // 3.将加法和加上校验位能被 10 整除。
    //bankno位银行卡号
    function luhnCheck(bankno){
        var lastNum=bankno.substr(bankno.length-1,1);//取出最后一位（与luhn进行比较）

        var first15Num=bankno.substr(0,bankno.length-1);//前15或18位
        var newArr=new Array();
        for(var i=first15Num.length-1;i>-1;i--){    //前15或18位倒序存进数组
            newArr.push(first15Num.substr(i,1));
        }
        var arrJiShu=new Array();  //奇数位*2的积 <9
        var arrJiShu2=new Array(); //奇数位*2的积 >9

        var arrOuShu=new Array();  //偶数位数组
        for(var j=0;j<newArr.length;j++){
            if((j+1)%2==1){//奇数位
                if(parseInt(newArr[j])*2<9)
                    arrJiShu.push(parseInt(newArr[j])*2);
                else
                    arrJiShu2.push(parseInt(newArr[j])*2);
            }
            else //偶数位
                arrOuShu.push(newArr[j]);
        }

        var jishu_child1=new Array();//奇数位*2 >9 的分割之后的数组个位数
        var jishu_child2=new Array();//奇数位*2 >9 的分割之后的数组十位数
        for(var h=0;h<arrJiShu2.length;h++){
            jishu_child1.push(parseInt(arrJiShu2[h])%10);
            jishu_child2.push(parseInt(arrJiShu2[h])/10);
        }

        var sumJiShu=0; //奇数位*2 < 9 的数组之和
        var sumOuShu=0; //偶数位数组之和
        var sumJiShuChild1=0; //奇数位*2 >9 的分割之后的数组个位数之和
        var sumJiShuChild2=0; //奇数位*2 >9 的分割之后的数组十位数之和
        var sumTotal=0;
        for(var m=0;m<arrJiShu.length;m++){
            sumJiShu=sumJiShu+parseInt(arrJiShu[m]);
        }

        for(var n=0;n<arrOuShu.length;n++){
            sumOuShu=sumOuShu+parseInt(arrOuShu[n]);
        }

        for(var p=0;p<jishu_child1.length;p++){
            sumJiShuChild1=sumJiShuChild1+parseInt(jishu_child1[p]);
            sumJiShuChild2=sumJiShuChild2+parseInt(jishu_child2[p]);
        }
        //计算总和
        sumTotal = parseInt(sumJiShu) + parseInt(sumOuShu) + parseInt(sumJiShuChild1) + parseInt(sumJiShuChild2);

        //计算luhn值
        var k= parseInt(sumTotal)%10==0?10:parseInt(sumTotal)%10;
        var luhn= 10-k;

        if(lastNum==luhn){
            return true;
        }
        else{
            return false;
        }
    }

************* js下载blob流类型文件 **************************************************************
<html>
<button class="download">下载</button>
</html>
<script src="http://code.jquery.com/jquery-1.9.1.js"></script>
<script src="https://cdn.bootcss.com/jquery.fileDownload/1.4.2/jquery.fileDownload.js"></script>
<script>

$('.download').click(function(){
var url = "http://192.168.100.238:8001/api/visit_records/exprot";
//实现Ajax下载文件
var xhr = new XMLHttpRequest();
   xhr.open('GET', url, true);        // 也可以使用POST方式，根据接口
   xhr.responseType = "blob";    // 返回类型blob
   // 定义请求完成的处理函数，请求前也可以增加加载框/禁用下载按钮逻辑
   xhr.onload = function () {
       // 请求完成
       if (this.status === 200) {
           // 返回200
           var blob = this.response;
		   console.log(blob.size)
		   //fileUrl = window.URL.createObjectURL(blob); //vue调用时用这个
		   fileUrl = URL.createObjectURL(blob);
		   console.log(fileUrl)
		   var a = document.createElement('a');
		   a.download = '走访数猪.xls';
		   a.href = fileUrl;
		   $("body").append(a);    // 修复firefox中无法触发click
		   a.click();
		   $(a).remove();
       }
   };
   // 发送ajax请求
   xhr.send()
});
</script>

************* js下载blob流类型文件 **************************************************************
<html>
	<header>
		<meta http-equiv="Access-Control-Allow-Origin" content="*">
	</header>
</html>
<script src="https://cdn.jsdelivr.net/npm/jquery@1.12.4/dist/jquery.min.js"></script>
<script>
var url = 'http://192.168.100.234:8001/api/pigfarms/058b2fb4-784d-11e9-ab81-0242ac180002/logs/export';
function download(options) {
    var xhr = new XMLHttpRequest();//创建新的XHR对象
    xhr.open(options.method, options.url);//指定获取数据的方式和url地址
    xhr.setRequestHeader('Content-Type', 'application/json; charset=UTF-8')
    xhr.responseType = 'blob';//以blob的形式接收数据，一般文件内容比较大
    // 定义请求完成的处理函数，请求前也可以增加加载框/禁用下载按钮逻辑
    xhr.onload = function () {
        // 请求完成
        if (this.status === 200) {
            //获取响应体中的Blob对象，触发浏览器下载它
            var blob = this.response;
            var reader = new FileReader();
            reader.readAsDataURL(blob);    // 转换为base64，可以直接放入a表情href
            reader.onload = function (e) {
                // 转换完成，创建一个a标签用于下载
                var a = document.createElement('a');
                //a.download = '文件名在请求头中取值，可以自定义一个响应头存放下载的文件名称';//下载的文件名
                a.download = '1.xls';//下载的文件名
                a.href = e.target.result;
                $("body").append(a);    // 修复firefox中无法触发click
                a.click();
                $(a).remove();
            }
        }
    };
    xhr.send(options.data); //post请求传的参数
}
function test()
{
    var options = {
        url: url,  //下载地址
        method: 'get'//post方式发送数据
    };
    download(options);
	return;
}
test();
</script>

https://my.oschina.net/watcher/blog/1525962
https://www.cnblogs.com/cdemo/p/5225848.html
***************************************************************************
