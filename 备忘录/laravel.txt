
---------------------------------------------------------------------------------------------	
laravel docs
	https://learnku.com/laravel/wikis/16722
	
	
	alt+7
---------------------------------------------------------------------------------------------	
通过 Composer 创建
composer create-project --prefer-dist laravel/laravel blog

composer create-project --prefer-dist laravel/laravel blog "5.5.*"

---------------------------------------------------------------------------------------------	
Composer 多线程下载加速
composer global require hirak/prestissimo
（PS：切记要全局安装）
---------------------------------------------------------------------------------------------	


---------------------------------------------------------------------------------------------	
可以用symfony命令启动(需要安装symfony)
symfony server:start
---------------------------------------------------------------------------------------------	


---------------------------------------------------------------------------------------------	
Laravel 模块化开发

widart/laravel-modules，laravel 的模块管理器
git 地址：https://github.com/nWidart/laravel-modules


安装：
使用 composer 快捷安装：
composer require nwidart/laravel-modules

接下来发布软件包的配置，通过运行以下方式：

php artisan vendor:publish --provider="Nwidart\Modules\LaravelModulesServiceProvider"
执行完上面这条命令之后，在 config 文件夹下会生成一个 modules.php 文件，这个是模块开发的配置文件，你可以在这里面进行配置。

添加自动加载：
默认情况下，模块类不会自动加载。 您可以使用 psr-4 自动加载模块。
修改文件：composer.json
{
"autoload": {
   "psr-4": {
      "App\\": "app/",
      "Modules\\": "Modules/"
   }
}
}
提示：不要忘记运行 composer dump-autoload 命令。


生成模块
接下来生成需要的模块，使用以下命令：
php artisan module:make module-name
如果需要一次生成多个模块，可以使用以下命令：

php artisan module:make module-name1 module-name2 module-name3

————————————————
https://learnku.com/articles/6153/laravel-modular-development
https://learnku.com/articles/24818
---------------------------------------------------------------------------------------------	


































---------------------------------------------------------------------------------------------
使用API Resources快速输出自定义JSON方法详解

php artisan make:resource Customer

https://laravelacademy.org/post/9203.html
https://www.jb51.net/article/184174.htm	
---------------------------------------------------------------------------------------------






---------------------------------------------------------------------------------------------	
cat storage/laravels.pid
pkill 查询出的id
---------------------------------------------------------------------------------------------	
	


---------------------------------------------------------------------------------------------	
安装 doctrine/dbal
# 如果只想在开发环境安装请加上 --dev
composer require "doctrine/dbal: ~2.3"


安装 larave-ide-helper
# 如果只想在开发环境安装请加上 --dev
composer require barryvdh/laravel-ide-helper
如果安装失败,可以在composer.json中require项新增"barryvdh/laravel-ide-helper": "v2.7.0",再composer update
"require": {
	"barryvdh/laravel-ide-helper": "v2.7.0",
},

---------------------------------------------------------------------------------------------	




---------------------------------------------------------------------------------------------	
Laravel IDE Helper
Laravel 超好用代码提示工具 Laravel IDE Helper

安装 doctrine/dbal
安装 larave-ide-helper


版本小于 5.5:
在 「config/app.php」的 「providers」数组中加入
Barryvdh\LaravelIdeHelper\IdeHelperServiceProvider::class
如果你的 Laravel 版本小于 5.5 「如果没记错」的话，请注册服务提供者，否则请忽略


导出配置文件（如果默认配置就满足需求了，也可以忽略这一步）
php artisan vendor:publish --provider="Barryvdh\LaravelIdeHelper\IdeHelperServiceProvider" --tag=config

使用
php artisan ide-helper:generate - 为 Facades 生成注释
php artisan ide-helper:models - 为数据模型生成注释
php artisan ide-helper:meta - 生成 PhpStorm Meta file


https://learnku.com/articles/10172/laravel-super-good-code-prompt-tool-laravel-ide-helper
---------------------------------------------------------------------------------------------	


---------------------------------------------------------------------------------------------
****************** 创建中间件 **********************
1、创建中间件
php artisan make:middleware Menus
2、自定义中间件（路由中间件），在App\Http\Kernel.php
    protected $routeMiddleware = [
        'auth' => \App\Http\Middleware\Authenticate::class,
        'auth.basic' => \Illuminate\Auth\Middleware\AuthenticateWithBasicAuth::class,
        'bindings' => \Illuminate\Routing\Middleware\SubstituteBindings::class,
        'cache.headers' => \Illuminate\Http\Middleware\SetCacheHeaders::class,
        'can' => \Illuminate\Auth\Middleware\Authorize::class,
        'guest' => \App\Http\Middleware\RedirectIfAuthenticated::class,
        'password.confirm' => \Illuminate\Auth\Middleware\RequirePassword::class,
        'signed' => \Illuminate\Routing\Middleware\ValidateSignature::class,
        'throttle' => \Illuminate\Routing\Middleware\ThrottleRequests::class,
        'verified' => \Illuminate\Auth\Middleware\EnsureEmailIsVerified::class,

        //自定义Rbac鉴权路由中间件
        'authenticationrbac' => \App\Http\Middleware\AuthenticationRbac::class,
        'menus' => \App\Http\Middleware\Menus::class,
    ];
3、注册好以后，将路由中间件应用到路由中去
	Route::middleware(['auth', 'authenticationrbac'])
4、测试以及编码



---------------------------------------------------------------------------------------------
****************** Laravel 文件上传 **********************
https://laravelacademy.org/post/22108




public function upload(Request $request){
	if ($request->isMethod('POST')) { //判断是否是POST上传，应该不会有人用get吧，恩，不会的

		//在源生的php代码中是使用$_FILE来查看上传文件的属性
		//但是在laravel里面有更好的封装好的方法，就是下面这个
		//显示的属性更多
		$fileCharater = $request->file('source');

		if ($fileCharater->isValid()) { //括号里面的是必须加的哦
			//如果括号里面的不加上的话，下面的方法也无法调用的

			//获取文件的扩展名 
			$ext = $fileCharater->getClientOriginalExtension();

			//获取文件的绝对路径
			$path = $fileCharater->getRealPath();

			//定义文件名
			$filename = date('Y-m-d-h-i-s').'.'.$ext;

			//存储文件。disk里面的public。总的来说，就是调用disk模块里的public配置
			Storage::disk('public')->put($filename, file_get_contents($path));
			
			//返回文件URL
			//http://127.0.0.1:8000/storage/2021/03/02/20210302045107603dc43b807dd.png
			URL::asset(Storage::url($filename));
			
			返回文件URL
			// /storage/2021/03/02/20210302045107603dc43b807dd.png
			Storage::url($filename);
		}
	}
	return view('upload');
}


****************** Laravel+layui图片上传及VerifyCsrfToken报错问题的解决**********************
https://blog.csdn.net/hgb24660/article/details/102457149

<!-- 一般在表单提交时，都会存放一个隐藏的输入框 -->
 <input type="hidden" name="_token" class="tag_token" value="{{ csrf_token() }}">

<script>
layui.use('upload', function(){
  var upload = layui.upload;
  $ = layui.jquery;
  var tag_token = $(".tag_token").val();		//ajax 请求前，先获取 csrf_token() 值 
  //执行实例
  var uploadInst = upload.render({
    elem: '#test1' //绑定元素
    ,url: '{{ url("student/uploads")}}' //上传接口
    ,data:{'_token':tag_token}			//ajax 请求时，将该值作为数据的一部分传输过去
    ,exts: 'jpg|png|gif'
    ,done: function(res){
        if(res.code == 200){
            layer.msg('上传成功!');
            $('#imgname').attr('src','/uploads/'+res.data);
            $('#img').attr('value',res.data);
        }
    }
    ,error: function(){
      //请求异常回调
    }
  });
});
</script>


---------------------------------------------------------------------------------------------
****************** Laravel Ajax请求总结 **********************
Ajax请求方法
1、页面需要添加
<meta name="csrf-token" content="{{ csrf_token() }}">

2、如果是form表单需要添加
{{ csrf_field() }} 或
<input type="hidden" name="_token" value="'.csrf_token().'">

3、Ajax请求方法
function submitForms() {
	$.ajax({
		type:'POST',
		url: "{{ url(route('backend.role.create')) }}",
		dataType: 'json',
		headers: {
			'X-CSRF-TOKEN': $('meta[name="csrf-token"]').attr('content')
		},
		data:{
			"name":name,
			"active":active,
		},
		success: function (data) {
			console.log(data);
		}
	});
}

4、Ajax请求返回
return response()->json([‘code’=> ‘success’]);

Ajax请求注意问题
1、当采用按钮点击进行Ajax请求，如下：
<button class="btn btn-primary" type="button" onclick="submitForms()">Submit form</button>
注意：一定要设置：type=“button”，否则会默认为：type=“submit”,请求完成后会进行页面重定向，进行
页面刷新

https://blog.csdn.net/zlshmily/article/details/105513800
---------------------------------------------------------------------------------------------



---------------------------------------------------------------------------------------------
****************** Laravel表单验证规则可以使用sql **********************

protected function validateUser(Request $request)
{
	$request->validate([
		'question' => [
			'required',
			Rule::unique('favors')->where(function($query) use ($request) {
				return $query->where('userid', $request->user()->id)->where('question', $request->question);
			})
		],
	]);
}

		
public function rules()
{
	$request = $this->request;
	return [
            'name' => [
                'required',
                Rule::unique('power')->where(function ($query) use ($request){
                    return $query->where('id', '!=', $request->get('id'))->where('name', $request->get('name'));
                }),
            ],
            'is_nav' => ['required'],
        ];
}
public function rules()
{
	$request = $this->request;
	return [
		'name' => [
			'required',
			'unique:power,name,'.$this->request->get('id'),
		],
		'is_nav' => ['required'],
	];
}

https://learnku.com/laravel/t/46387

---------------------------------------------------------------------------------------------
****************** Laravel Request Validation: The given data was invalid **********************

use Illuminate\Support\Arr;
use Illuminate\Validation\ValidationException;
if ($exception instanceof ValidationException) {
      return response(Arr::first(Arr::collapse($exception->errors())));
}

参考资料
https://learnku.com/laravel/t/20879


在自定义验证类时，同样抛出The given data was invalid错误信息，并且在控制器中无法通过异常捕获错误信息
解决：
	在自定义类中 app\Http\Requests\UpdateAuthPut.php 重新写方法
	
	use Illuminate\Contracts\Validation\Validator;
	use Illuminate\Validation\ValidationException;
	
	/**
     * @param Validator $validator
     */
    public function failedValidation(Validator $validator)
    {
        try {
            throw (new ValidationException($validator));
        }catch (ValidationException $validationException){
        }
    }
	然后在控制器中，使用
	try{
	
	}catch (ValidationException $validationException){
		if ($validationException instanceof ValidationException) {
			return response()->json(['code'=>'err', 'msg'=>Arr::first(Arr::collapse($validationException->errors()))]);
		}
	}


	
---------------------------------------------------------------------------------------------

---------------------------------------------------------------------------------------------
****************** blade函数列表 **********************
route($name, $parameters = [], $absolute = true)

url($path = null, $parameters = [], $secure = null)




---------------------------------------------------------------------------------------------

---------------------------------------------------------------------------------------------
****************** 数据库迁移 **********************
php artisan make:migration create_users_table --create=users

新增字段
php artisan make:migration add_votes_to_users_table --table=users

或者 这种方式新增字段（posts表新增image_path字段）
php artisan make:migration alter_posts_table_add_image_path --table=posts


删除字段
php artisan make:migration del_votes_to_users_table --table=users

修改字段
php artisan make:migration change_votes_to_users_table --table=users

在字段后面新增change(),如：$table->uuid('category_id')->change();

php artisan migrate --seed


---------------------------------------------------------------------------------------------

---------------------------------------------------------------------------------------------	
laravel提交表单后提示


后台：
return back()->with('success','成功添加');

前端：
@if (Session::has('success'))
	layer.msg("{{Session::get('success')}}");
@endif


---------------------------------------------------------------------------------------------	
Laravel验证码
安装 mews/captcha
composer require "mews/captcha"

注册：
在config/app.php下的providers数组里面追加一下代码
Mews\Captcha\CaptchaServiceProvider::class,

**aliases **数组里面追加
'Captcha' => Mews\Captcha\Facades\Captcha::class,

在composer命令行下执行
php artisan vendor:publish
生成配置文件captcha.php

前端引用
 <img src="{{captcha_src()}}" style="cursor: pointer" onclick="this.src='{{captcha_src()}}'+Math.random()">


https://www.jianshu.com/p/a36e7c9dad49
https://learnku.com/articles/23704


---------------------------------------------------------------------------------------------
laravel自定义后台登录

https://www.jianshu.com/p/a57e134ca5f1
https://blog.csdn.net/mengziwudao/article/details/107822888
	


	
---------------------------------------------------------------------------------------------	
---------------------------------------------------------------------------------------------	
---------------------------------------------------------------------------------------------	
---------------------------------------------------------------------------------------------	


---------------------------------------------------------------------------------------------
使用Laravel时引入CSS和JS文件
引入css 默认引入public目录

<link rel="stylesheet" href="{{URL::asset('css/xxx.css')}}">
引入js 默认引入public目录

<script type="text/javascript" src="{{URL::asset('js/xxx.js')}}"></script>
引入外面的的css 把http:去掉即可

<link rel="stylesheet" href="{{URL::asset('//域名/css/css.css')}}">
引入外面的的js 把http:去掉即可

<script type="text/javascript" src="{{URL::asset('//域名/js/js.js')}}"></script>
---------------------------------------------------------------------------------------------

	
---------------------------------------------------------------------------------------------	
---------------------------------------------------------------------------------------------	

config
	读取配置的方法，即使用内置的config函数+配置文件名+配置参数名方式来读取配置的值
		$value = config('app.timezone');
	设置配置的方法（只是在运行时（runtime）配置，不会写入到配置文件里）
		config(['app.timezone' => 'Asia/Shanghai']);
	缓存配置
		php artisan config:cache

---------------------------------------------------------------------------------------------		
---------------------------------------------------------------------------------------------		
---------------------------------------------------------------------------------------------		
laravel自定义公共函数的引入
	1. 在 app/Helpers/目录 创建 functions.php
	2. 配置 composer.json
		打开项目根目录下的 composer.json 文件，找到"autoload" 配置项，补充如下代码：
		"files":[
            "app/Helper/functions.php"
        ]
	3. 执行 composer 命令
		composer dump-auto 
		
---------------------------------------------------------------------------------------------		
laravel清除视图缓存
	php artisan view:clear
清除运行缓存
	php artisan cache:clear
清除配置缓存
	php artisan config:clear
	
	
	
---------------------------------------------------------------------------------------------
错误或遇到的坑		
---------------------------------------------------------------------------------------------
1、修改view文件后没有立即生效(vendor/laravel/framework/src/Illuminate/View/Compilers 判断时间源码)
	有可能是服务器上的时间比本地的时间快，修改服务器上时间即可
		更新系统年月日
		timedatectl set-time 2017-06-13
		更新系统时分秒
		timedatectl set-time 10:25:17
		
2、The stream or file "/data/web/1024/storage/logs/laravel.log" could not be opened: failed to open stream: Permission denied
	解决：chmod 777 -R storage/
	
3、Please provide a valid cache path.
	解决方法如下：

	1、确保storage目录下有如app，framework，views三个目录。

	2、确保storage/framework目录下也有cache，sessions，views三个目录。

	3、chmod 0777 -R ./storage/
	缺少以上目录就手动创建，然后访问网站首页试试。
	
4、No application encryption key has been specified.
