
yum -y install libjpeg libjpeg-devel libpng libpng-devel freetype freetype-devel libxml2 libxml2-devel mysql pcre-devel
yum -y install openssl openssl-devel
yum -y install curl curl-devel
yum -y install libxslt-devel*

 
 ./configure --prefix=/usr/local/php7 \
 --with-curl \
 --with-freetype-dir \
 --with-gettext \
 --with-iconv-dir \
 --with-kerberos \
 --with-libdir=lib64 \
 --with-libxml-dir \
 --with-mysqli \
 --with-openssl \
 --with-pcre-regex \
 --with-pdo-mysql \
 --with-pdo-sqlite \
 --with-pear \
 --with-png-dir \
 --with-xmlrpc \
 --with-xsl \
 --with-zlib \
 --enable-fpm \
 --enable-bcmath \
 --enable-libxml \
 --enable-inline-optimization \
 --enable-gd-native-ttf \
 --enable-mbregex \
 --enable-mbstring \
 --enable-opcache \
 --enable-pcntl \
 --enable-shmop \
 --enable-soap \
 --enable-sockets \
 --enable-sysvsem \
 --enable-xml \
 --enable-zip
 
 
 编译安装
# make &&  make install
 
 
 cp php.ini-development /usr/local/php7/lib/php.ini
 cp /usr/local/php7/etc/php-fpm.conf.default /usr/local/php7/etc/php-fpm.conf
 cp /usr/local/php7/etc/php-fpm.d/www.conf.default /usr/local/php7/etc/php-fpm.d/www.conf
 cp -R ./sapi/fpm/php-fpm /etc/init.d/php-fpm
 
 
 


######################### php扩展安装 ######################################



######################### php-fpm ######################################
启动php-fpm:
/usr/local/php/sbin/php-fpm

php 5.3.3 以后的php-fpm 不再支持 php-fpm 以前具有的 /usr/local/php/sbin/php-fpm (start|stop|reload)等命令，所以不要再看这种老掉牙的命令了，需要使用信号控制：
master进程可以理解以下信号
INT, TERM 立刻终止
QUIT 平滑终止
USR1 重新打开日志文件
USR2 平滑重载所有worker进程并重新载入配置和二进制模块

一个简单直接的重启方法：
先查看php-fpm的master进程号
重启php-fpm:
kill -USR2 进程号

关闭php-fpm
	pkill php-fpm



######################### PHP安装扩展 ######################################
--enable-static：生成静态链接库
--enable-shared：生成动态链接库


如果之前有安装记录，建议先make clean ,否则可能导致安装失败

$ curl -O https://xdebug.org/files/xdebug-2.5.0.tgz
$ tar -zxf xdebug-2.5.0.tgz
$ cd xdebug-2.5.0
$ phpize
$ ./configure --with-php-config=/usr/local/php7/bin/php-config
$ make
$ make install
Installing shared extensions:     /usr/lib/php/extensions/no-debug-non-zts-20131226/


php安装freetype
https://www.freetype.org/download.html
如果之前有安装记录，建议先make clean ,否则可能导致安装失败
cd php/ext/gd
make clean
./configure --with-php-config=/usr/local/php7/bin/php-config --with-freetype-dir=/usr/local/freetype/
make && make install


PHP安装JPEG
http://www.ijg.org/ 下载
cd jpeg/
./configure --prefix=/usr/local/jpeg --enable-shared
make
make install
如果之前有安装记录，建议先make clean ,否则可能导致安装失败
cd php/ext/gd
./configure --with-php-config=/usr/local/php7/bin/php-config --with-jpeg-dir=/usr/local/jpeg/
make && make install

安装gd扩展
./configure --with-php-config=/usr/local/php7/bin/php-config --with-freetype-dir=/usr/local/freetype/ --with-jpeg-dir=/usr/local/jpeg/
 
######################### PHP其他问题 ######################################
解决添加删除修改环境变量问题
	编辑在/etc/profile 或者用户目录 ~/.bash_profile
	编辑后让/etc/profile文件修改后立即生效方法
		方法1、 ./etc/profile
		方法2、source /etc/profile
	
bash: php: command not found 
解决：
export PATH=$PATH:/usr/local/php/bin
	

#################php7安装mongodb#####################
yum -y install php-devel

PHP7 Mongdb 扩展安装我们使用 pecl 命令来安装：
$ /usr/local/php7/bin/pecl install mongodb
接下来我们打开 php.ini 文件，添加 extension=mongodb.so 配置



----------------------------------------------------------------------
VMware虚拟机中的CentOS7安装Nginx后本机无法访问的解决办法
在虚拟机centos7上安装nginx之后虚拟机内能访问，真机不能访问，修改iptables配置也不起作用，最后上网查找了资料后才发现centos的防火墙改成了firewall,不再叫iptables,开放端口的方法如下
firewall-cmd --zone=public --add-port=80/tcp --permanent 
命令含义：
–zone #作用域
–add-port=80/tcp #添加端口，格式为：端口/通讯协议
–permanent #永久生效，没有此参数重启后失效

重启防火墙：
systemctl stop firewalld.service  
systemctl start firewalld.service
 
############################## Nginx #################################

安装Nginx
安装pcre-devel与openssl-devel
yum -y install pcre-devel openssl openssl-devel

启动Nginx
/usr/local/nginx/sbin/nginx
启动代码格式：nginx安装目录地址 -c nginx配置文件地址
/usr/local/nginx/sbin/nginx -c /usr/local/nginx/conf/nginx.conf

停止
从容停止
1、查看进程号 ps -ef|grep nginx
2、杀死进程 kill -QUIT 2072

快速停止
1、查看进程号 ps -ef|grep nginx
2、杀死进程
[root@LinuxServer ~]# kill -TERM 2132
或 [root@LinuxServer ~]# kill -INT 2132

强制停止
pkill -9 nginx

重启Nginx服务
方法一：进入nginx可执行目录sbin下，输入命令./nginx -s reload
方法二：查找当前nginx进程号，然后输入命令：kill -HUP 进程号 实现重启nginx服务


开启目录自动显示
nginx的配置文件nginx.conf在
# cd /usr/local/nginx/conf
有时候需要开启目录自动显示功能	
	#自动显示目录  
	autoindex on;
	
	
------------------nginx常见问题---------------------

[root@localhost nginx-1.11.2]# /usr/local/nginx/sbin/nginx
nginx: [emerg] getpwnam("nginx") failed
没有安装nginx用户导致的无法启动
[root@localhost nginx-1.11.2]# useradd -s /sbin/nologin -M nginx
[root@localhost nginx-1.11.2]# id nginx


############################ #redis ##################################
redis
下载地址：http://redis.io/download，下载最新文档版本。
本教程使用的最新文档版本为 2.8.17，下载并安装：
$ wget http://download.redis.io/releases/redis-2.8.17.tar.gz
$ tar xzf redis-2.8.17.tar.gz
$ cd redis-2.8.17
$ make
make完后 redis-2.8.17目录下会出现编译后的redis服务程序redis-server,还有用于测试的客户端程序redis-cli,两个程序位于安装目录 src 目录下：
下面启动redis服务.
$ cd src
$ ./redis-server
注意这种方式启动redis 使用的是默认配置。也可以通过启动参数告诉redis使用指定配置文件使用下面命令启动。
$ cd src
$ ./redis-server redis.conf
redis.conf是一个默认的配置文件。我们可以根据需要使用自己的配置文件。
启动redis服务进程后，就可以使用测试客户端程序redis-cli和redis服务交互了。 比如：
$ cd src
$ ./redis-cli
redis> set foo bar
OK
redis> get foo
"bar"


cd redis-2.8.17
make 
cd src
make install PREFIX=/usr/local/redis






redis安装最新教程
1、下载
http://redis.io/download
2、解压至任一目录
tar xzf redis-2.8.17.tar.gz
3、编译并安装
	编译：make
	安装到指定目录： make PREFIX=/usr/local/redis install
4、将配置文件复制到redis安装目录下
cp redis.conf /usr/local/redis/etc/redis.conf
5、启动服务、配置
/usr/local/redis/bin/redis-server /usr/local/redis/etc/redis.conf
第一个是启动redis服务器
第二个是启动服务器所需的配置
6、默认情况，Redis不是在后台运行，我们需要把redis放在后台运行
vim /usr/local/redis/etc/redis.conf
将daemonize的值改为yes
7、让redis开机自启vim /etc/rc.local加入
/usr/local/redis/bin/redis-server /usr/local/redis/etc/redis-conf
8、客户端链接
/usr/local/redis/bin/redis-cli 
9、停止服务
/usr/local/redis/bin/redis-cli shutdown或者pkill redis-server
10、/usr/local/redis/bin目录下的几个关键文件
redis-benchmark：redis性能测试工具
redis-check-aof：检查aof日志的工具
redis-check-dump：检查rdb日志的工具
redis-cli：连接用的客户端
redis-server：redis服务进程


注册服务,开机自启
cp /usr/local/src/redis-5.0.4/utils/redis_init_script /etc/init.d/redis
vim /etc/init.d/redis
	EXEC=/usr/local/redis/bin/redis-server
	CLIEXEC=/usr/local/redis/bin/redis-cli
	
	CONF="/usr/local/redis/etc/${REDISPORT}.conf"

chmod +x /etc/init.d/redis
chkconfig --add redis
chkconfig --list



安装php的redis扩展
phpize
./configure --with-php-config=/usr/local/php7/bin/php-config
make && make install
配置php.ini在extension后添加extension=redis.so
###############################################################
查找php.ini位置 
 php -i |grep php.ini
 
 
 lsof命令详解
 lsof -i:端口	查看指定端口的进程
 kill 进程id（pid）
 kill -9 pid 强制杀掉pid
 
 
 查看运行的服务
 ps -ef|grep svnserve
 
 
 查看端口等信息
 netstat -anp |grep svn
 
 netstat -lnt | grep 80
 
 
subversion的默认端口是3690，我们将3690添加的服务器的允许列表中
打开iptables，添加如下一句配置：
iptables -A INPUT -p tcp --dport 3690 -j ACCEPT
 
 
 
 svn操作
 启动与停止 上述启动命令中，-d表示守护进程， -r 表示在后台执行。停止还可以采用杀死进程的方式
[root@localhost conf]# svnserve -d -r /home/svn（启动）
[root@localhost conf]#killall svnserve（停止）




*********** Linux系统安装MySql ****************
查找以前是否安装有mysql，使用下面命令：
rpm –qa | grep -i mysql


一、建立用户，以及mysql的目录
1、groupadd mysql #建立一个mysql的组
2、useradd -r -g mysql mysql #建立mysql用户，并且把用户放到mysql组
3、passwd mysql #给mysql用户设置一个密码 mysql

四、解压mysql安装包
1、先把tar.gz包移动到/usr/local 目录下，
mv /software/MySQL/mysql-5.7.17-linux-glibc2.5-x86_64.tar.gz /usr/local
 
2、解压tar.gz包
先去到/usr/local 目录下， 输入命令cd /usr/local
解压命令 tar -zxvf mysql-5.7.17-linux-glibc2.5-x86_64.tar.gz

3、会发现多出目录 mysql-5.7.17-linux-glibc2.5-x86_64，改一下目录名字为 /usr/local/mysql

五、配置相关的启动配置文件
首先要去到support-files/文件目录下，输入命令： cd support-files/
1、复制my.cnf 到 /etc/my.cnf (mysql启动时自动读取)
输入命令 cp my-default.cnf /etc/my.cnf（覆盖原有文件）

2、解决乱码问题
输入命令：vi /etc/my.cnf （进入可编辑状态）
更改：
[mysql]
default-character-set=utf8（表示解决客户端乱码问题）
[mysqld]
default-storage-engine=INNODB
character_set_server=utf8（表示解决服务端乱码问题）
basedir = /usr/local/mysql
datadir = /usr/local/mysql/data

3、复制mysql.server 到/etc/init.d/ 目录下 【目的想实现mysqld -install这样开机自动执行效果】
输入命令 cp mysql.server /etc/init.d/mysql （mysql是服务名）
注意： /etc/init.d/ 目录，等效于注册表HKEY_LOCAL_MACHINE\SYSTEM\ControlSet001\services记录有那些服务

4、修改/etc/init.d/mysql 参数
输入命令 vi /etc/init.d/mysql
给与两个目录位置
basedir=/usr/local/mysql
datadir=/usr/local/mysql/data

5、给目录/usr/local/mysql 更改拥有者
输入命令 chown -R mysql:mysql /usr/local/mysql/

六、初始化mysql的数据库
1、初始化mysql
mysql_install_db （老版本的做法）
新版本： 初始化
输入命令 ./mysqld --initialize --user=mysql--basedir=/usr/local/mysql --datadir=/usr/local/mysql/data （这个报错则用下面的）
输入命令 ./mysqld --initialize --user=mysql --datadir=/usr/local/mysql/data
生成出一个data目录，代表数据库已经初始化成功
并且mysql的root用户生成一个临时密码：(记录下临时密码XXX)
eg:A temporary password is generated for root@localhost: GeMfL>dtq9v>

2、给数据库加密
输入命令 ./mysql_ssl_rsa_setup --datadir=/usr/local/mysql/data

3、启动mysql
输入命令 ./mysqld_safe --user=mysql & （&符表示提交到后台运行mysql服务）

4、关闭mysql
./mysqladmin -uroot -proot shutdown

七、进入客户端
1、登录
输入命令 ./mysql -uroot -p 
然后再输入你的临时密码

2、修改密码
输入命令 set password=password(‘xxxx')

八、window远程访问Linux虚拟机的mysql
1、关闭防火墙 (或者给防火墙开放端口)，这样window才能连接上
输入命令 systemctl stop firewalld.service

2、给Windows授权
输入命令 mysql>grant all privileges on *.* to root@'%' identified by '123456';



mysql>flush privileges;
 
3、远程链接数据库，或者重启(init 6)。
输入命令：mysql –hIP地址 -uroot -p123456







*********** 常见问题 ****************
mount /dev/cdrom /mnt/cdrom/
mount: block device /dev/cdrom is write-protected, mounting read-only
解决
mount -o remount,rw /



*********** Linux系统安装VMware Tools和同W7共享文件遇到的问题 ****************
CentOS6.5 minimal版本  minimal版本默认不启动网络，所以要自己配置
vi /etc/sysconfig/network-script/ifcfg-eth0
1 NM_CONTROLLED="no"     #修改为no不依赖VMware NetworkManager控制
2 ONBOOT="yes"           #修改为yes设置开机启动

用vmware-hgfsclient命令可以看到你的共享文件夹目



*********** 开机自启动nginx，php-fpm（其他服务类似） ****************
源码安装的手动建立nginx.service服务文件
在系统服务目录里创建nginx.service文件
vi /lib/systemd/system/nginx.service
写入以下内容（路径改成自己的）

[Unit]
Description=nginx
After=network.target
[Service]
Type=forking
ExecStart=/www/lnmp/nginx/sbin/nginx -c /www/lnmp/nginx/conf/nginx.conf
ExecReload=/www/lnmp/nginx/sbin/nginx -s reload
ExecStop=/www/lnmp/nginx/sbin/nginx -s quit
PrivateTmp=true
[Install]
WantedBy=multi-user.target

/*
我机器下的配置nginx.service

[Unit]
Description=nginx
After=network.target
[Service]
Type=forking
ExecStart=/usr/local/nginx/sbin/nginx -c /usr/local/nginx/conf/nginx.conf
ExecReload=/usr/local/nginx/sbin/nginx -s reload
ExecStop=/usr/local/nginx/sbin/nginx -s quit
PrivateTmp=true
[Install]
WantedBy=multi-user.target

*/

在系统服务目录里创建php-fpm.service文件
vi /lib/systemd/system/php-fpm.service
写入以下内容（路径改成自己的）

[Unit]
Description=php-fpm
After=network.target
[Service]
Type=forking
ExecStart=/www/lnmp/php/sbin/php-fpm
PrivateTmp=true
[Install]
WantedBy=multi-user.target

/*
我机器下的配置php-fpm.service

[Unit]
Description=php-fpm
After=network.target
[Service]
Type=forking
ExecStart=/usr/local/php7/sbin/php-fpm
PrivateTmp=true
[Install]
WantedBy=multi-user.target

*/



[Unit]:服务的说明
Description:描述服务
After:描述服务类别
[Service]服务运行参数的设置
Type=forking是后台运行的形式
ExecStart为服务的具体运行命令
ExecReload为重启命令
ExecStop为停止命令
PrivateTmp=True表示给服务分配独立的临时空间
注意：[Service]的启动、重启、停止命令全部要求使用绝对路径
[Install]运行级别下服务安装的相关设置，可设置为多用户，即系统运行级别为3



测试并加入开机自启
先关闭nginx，php-fpm
使用以下命令开启
systemctl start nginx.service             #如果服务是开启状态，使用此命令会启动失败。
systemctl start php-fpm.service
开启成功，将服务加入开机自启
systemctl enable nginx.service                #注意后面不能跟空格
systemctl enable php-fpm.service
重启服务器，查看是否启动
shutdown -r now        #重启
systemctl list-units --type=service           #查看运行的服务

其他命令
systemctl start nginx.service              #启动nginx服务
systemctl enable nginx.service             #设置开机自启动
systemctl disable nginx.service            #停止开机自启动
systemctl status nginx.service             #查看服务当前状态
systemctl restart nginx.service　          #重新启动服务
systemctl list-units --type=service        #查看所有已启动的服务
















/*********************************************************************
*php在服务器上常报错			重要
***********************************************************************/
1、No input file specified
一般是nginx配置问题，在localtion里加入
fastcgi_param PHP_ADMIN_VALUE "open_basedir=$document_root/:$document_root/../:/tmp/:/proc/:/wwwroot/";
注：wwwroot是网站跟目录


2、在编译安装php时加上了--with-gd后使用JPEG报错解决办法
重新安装PHP，然后安装gd扩展（网上也有不重新安装PHP直接安装gd的，但试了没有成功）
重新安装PHP后安装gd步骤：
1、找到php 源码目录  
2、进入 ext/gd 目录  
3、/usr/local/php/bin/phpize  
4、./configure --with-php7-config=/usr/local/php7/bin/php-config --with-jpeg-dir=/usr/local/jpeg --with-freetype-dir  
5、make && make install  
6、生成gd.so后加入到php.ini
7、重启 php-fpm,nginx或apache 



******************************* 服务器配置问题列表 ****************************************/

1、配置Nginx和php-fpm用Sock套接字连接时，找不到php-fpm.sock的原因
	php5.3之后的版本，php-fpm.conf里的listen的默认配置是127.0.0.1:9000，就不会生成php-fpm.sock，因此如果需要Nginx里的配置有链接tmp/php-fpm.sock的话，需要将listen的地址配置成和nginx的配置文件一致，同时保证这个路径已经存在，这样在启动./php-fpm的时候，会在对应路径上自动生成php-fpm.sock，例如：

	 让PHP-FPM使用Unix套接字

	默认情况下监听端口 9000 。 另外，也可以使PHP-FPM使用Unix套接字，这避免了TCP的开销。要做到这一点，打开 /etc/php-fpm.d/www.conf…

	vi /etc/php-fpm.d/www.conf
	如果在/etc/下没有php-fpm.d/www.conf，可能在你安装php下的etc里

	… 修改后如下：

	[...]
	;listen = 127.0.0.1:9000
	listen = /var/run/php-fpm/php5-fpm.sock
	[...]
	然后重新加载 PHP-FPM：

	systemctl restart php-fpm.service

	接下来通过你的nginx的配置和所有的虚拟主机和改线 fastcgi_pass 127.0.0.1:9000; to fastcgi_pass unix:/tmp/php5-fpm.sock;,像这样：

	vi /etc/nginx/conf.d/default.conf
	

	[...]
		location ~ .php$ {
			root           /usr/share/nginx/html;
			try_files $uri =404;
			fastcgi_pass   unix:/var/run/php-fpm/php5-fpm.sock;
			fastcgi_index  index.php;
			fastcgi_param  SCRIPT_FILENAME  $document_root$fastcgi_script_name;
			include        fastcgi_params;
		}
	[...]
	最后重新加载 nginx：

	systemctl restart nginx.service 

	这样配置好后，就会在/var/run/php-fpm/目录下自动生成一个php5-fpm.sock文件，然后一切OK。

	本机sock文件：/var/run/php-fpm/php7.1.5-fpm.sock
	
2、使用unix socket配置nginx fastcgi_pass时报502错解决
	版本高于5.4（含5.4） 默认监听的socket文件权限是所有者只读，属组和其他用户没有任何权限。所以，nginx的启动用户（咱们配置的是nobody）就没有办法去读这个socket文件，最终导致502，这个问题可以在nginx的错误日志中发现。解决办法很简单，上面给出的配置文件中就有避免这个问题的配置。
	
	vim /usr/local/php7/etc/php-fpm.d/www.conf
	
	[...]
	listen.owner = nobody  //定义属主
	listen.group = nobody  //定义属组
	[...]
	
	这两个配置就是定义socket的属主和属组是谁。除了这个还有一种方法
	
	listen.mode = 777

	
3、nginx配置好了，html能执行，PHP也能执行但没有返回内容，说明fastcgi配置有问题
	fastcgi_param  SCRIPT_FILENAME  $document_root$fastcgi_script_name;

