************************************* 参考资料 ******************************************
https://redis.io/

Redis5.0的新特性stream
https://www.zhihu.com/question/279540635

http://doc.redisfans.com/

************************************* install ******************************************
centos7安装redis6.0踩坑之路
1、打开redis官网https://redis.io/，找到download界面，复制下载链接http://download.redis.io/releases/redis-6.0.1.tar.gz然后在linux终端上用wget命令进行安装
wget http://download.redis.io/releases/redis-6.0.1.tar.gz

2、然后执行tar进行解压缩包
tar -zxvf redis-6.0.1.tar.gz

3、通过阅读redis-6.0.1下的README.MD可以自己进行安装，这里留下安装方式
	3.1输入make命令进行编译整个redis
		make
	3.2 如果遇到cc命令没找到，就要先安装gcc，如果没有问题就跳转到3.5
	3.3 执行yum安装gcc
		yum install gcc -y

	3.4 安装完成后清除一下上一次make的缓存，然后再执行命令make，就行编译
		make distclean && make
	3.5如果还是报错server.c的问题，查看gcc的版本，然后升级gcc的版本,如果没有问题就跳转到3.7
		# 查看gcc版本是否在5.3以上，centos7.6默认安装4.8.5
		gcc -v
		# 升级gcc到5.3及以上,如下：
		升级到gcc 9.3：
		yum -y install centos-release-scl
		yum -y install devtoolset-9-gcc devtoolset-9-gcc-c++ devtoolset-9-binutils
		scl enable devtoolset-9 bash
		需要注意的是scl命令启用只是临时的，退出shell或重启就会恢复原系统gcc版本。
		如果要长期使用gcc 9.3的话：

		echo "source /opt/rh/devtoolset-9/enable" >>/etc/profile
		这样退出shell重新打开就是新版的gcc了
		以下其他版本同理，修改devtoolset版本号即可。
		
	3.6 完成后再清理一次缓存，然后再make
		make distclean && make
	3.7 安装
		make install
		
https://blog.csdn.net/weixin_43260474/article/details/106003751


centos7安装redis6.0踩坑之路
1、安装gcc套装：
	yum install cpp
	yum install binutils
	yum install glibc
	yum install glibc-kernheaders
	yum install glibc-common
	yum install glibc-devel
	yum install gcc
	yum install make
2、升级gcc
	yum -y install centos-release-scl
	yum -y install devtoolset-9-gcc devtoolset-9-gcc-c++ devtoolset-9-binutils
	scl enable devtoolset-9 bash

3、设置永久升级：
	echo "source /opt/rh/devtoolset-9/enable" >>/etc/profile

4、安装redis：
	wget http://download.redis.io/releases/redis-6.0.3.tar.gz
	tar xzf redis-6.0.3.tar.gz
	cd redis-6.0.3
	make
	make install

5、启动服务：
	src/redis-server
6、客户端测试：
	src/redis-cli
	
https://blog.csdn.net/walykyy/article/details/106291628

************************************* php安装Redis扩展 ******************************************
https://github.com/phpredis/phpredis


************************************* redis配置 ******************************************
bind 127.0.0.1
bind 192.168.241.199
protected-mode no
port 6379
tcp-backlog 511
timeout 0
tcp-keepalive 300
daemonize yes
supervised no
pidfile /var/run/redis_6379.pid
loglevel notice
logfile "6379.log"
databases 16
always-show-logo yes
save 900 1
save 300 10
save 60 10000
stop-writes-on-bgsave-error yes
rdbcompression yes
rdbchecksum yes
dbfilename dump.rdb
rdb-del-sync-files no
dir /usr/local/redis-6.0.3/data
replica-serve-stale-data yes
replica-read-only yes
repl-diskless-sync no
repl-diskless-sync-delay 5
repl-diskless-load disabled
repl-disable-tcp-nodelay no
replica-priority 100
acllog-max-len 128
lazyfree-lazy-eviction no
lazyfree-lazy-expire no
lazyfree-lazy-server-del no
replica-lazy-flush no
lazyfree-lazy-user-del no
appendonly no
appendfilename "appendonly.aof"
appendfsync everysec
no-appendfsync-on-rewrite no
auto-aof-rewrite-percentage 100
auto-aof-rewrite-min-size 64mb
aof-load-truncated yes
aof-use-rdb-preamble yes
lua-time-limit 5000
slowlog-log-slower-than 10000
slowlog-max-len 128
latency-monitor-threshold 0
notify-keyspace-events ""
hash-max-ziplist-entries 512
hash-max-ziplist-value 64
list-max-ziplist-size -2
list-compress-depth 0
set-max-intset-entries 512
zset-max-ziplist-entries 128
zset-max-ziplist-value 64
hll-sparse-max-bytes 3000
stream-node-max-bytes 4096
stream-node-max-entries 100
activerehashing yes
client-output-buffer-limit normal 0 0 0
client-output-buffer-limit replica 256mb 64mb 60
client-output-buffer-limit pubsub 32mb 8mb 60
hz 10
dynamic-hz yes
aof-rewrite-incremental-fsync yes
rdb-save-incremental-fsync yes
jemalloc-bg-thread yes


************************************* redis配置 ******************************************
设置密码：
	vim redis.conf
	requirepass root #释放注释

注释redis绑定
	搜索 bind 127.0.0.1 全部注释掉

禁用保护模式
	protected-mode no
启用保护模式
	protected-mode yes
	
************************************* stream ******************************************
增删改查
	xadd 追加消息
	xdel 删除消息，这里的删除仅仅是设置了标志位，不影响消息总长度
	xrange 获取消息列表，会自动过滤已经删除的消息
	xlen 消息长度
	del 删除Stream

eg:
	# *号表示服务器自动生成ID，后面顺序跟着一堆key/value
	127.0.0.1:6379> xadd codehole * name laoqian age 30  #  名字叫laoqian，年龄30岁
	
	127.0.0.1:6379> xlen codehole 
	
	127.0.0.1:6379> xrange codehole - +  # -表示最小值, +表示最大值
	
	127.0.0.1:6379> xrange codehole 1527849629172-0 +  # 指定最小消息ID的列表
	
	127.0.0.1:6379> xrange codehole - 1527849629172-0  # 指定最大消息ID的列表
	
	127.0.0.1:6379> xdel codehole 1527849609889-0 #删除消息
	
	127.0.0.1:6379> del codehole  # 删除整个Stream
	
独立消费	
	# 从Stream头部读取两条消息
	127.0.0.1:6379> xread count 2 streams codehole 0-0
	
	# 从Stream尾部读取一条消息，毫无疑问，这里不会返回任何消息
	127.0.0.1:6379> xread count 1 streams codehole $
	(nil)
	# 从尾部阻塞等待新消息到来，下面的指令会堵住，直到新消息到来
	127.0.0.1:6379> xread block 0 count 1 streams codehole $
	# 我们从新打开一个窗口，在这个窗口往Stream里塞消息
	127.0.0.1:6379> xadd codehole * name youming age 60
	1527852774092-0
	# 再切换到前面的窗口，我们可以看到阻塞解除了，返回了新的消息内容
	# 而且还显示了一个等待时间，这里我们等待了93s
	客户端如果想要使用xread进行顺序消费，一定要记住当前消费到哪里了，也就是返回的消息ID。下次继续调用xread时，将上次返回的最后一个消息ID作为参数传递进去，就可以继续消费后续的消息。block 0表示永远阻塞，直到消息到来，block 1000表示阻塞1s，如果1s内没有任何消息到来，就返回nil
	127.0.0.1:6379> xread block 1000 count 1 streams codehole $


创建消费组
	Stream通过xgroup create指令创建消费组(Consumer Group)，需要传递起始消息ID参数用来初始化last_delivered_id变量。
	
	127.0.0.1:6379> xgroup create codehole cg1 0-0  #  表示从头开始消费
	OK
	# $表示从尾部开始消费，只接受新消息，当前Stream消息会全部忽略
	127.0.0.1:6379> xgroup create codehole cg2 $
	OK
	127.0.0.1:6379> xinfo stream codehole  # 获取Stream信息
	 1) length
	 2) (integer) 3  # 共3个消息
	 3) radix-tree-keys
	 4) (integer) 1
	 5) radix-tree-nodes
	 6) (integer) 2
	 7) groups
	 8) (integer) 2  # 两个消费组
	 9) first-entry  # 第一个消息
	10) 1) 1527851486781-0
		2) 1) "name"
		   2) "laoqian"
		   3) "age"
		   4) "30"
	11) last-entry  # 最后一个消息
	12) 1) 1527851498956-0
		2) 1) "name"
		   2) "xiaoqian"
		   3) "age"
		   4) "1"
	127.0.0.1:6379> xinfo groups codehole  # 获取Stream的消费组信息
	1) 1) name
	   2) "cg1"
	   3) consumers
	   4) (integer) 0  # 该消费组还没有消费者
	   5) pending
	   6) (integer) 0  # 该消费组没有正在处理的消息
	2) 1) name
	   2) "cg2"
	   3) consumers  # 该消费组还没有消费者
	   4) (integer) 0
	   5) pending
	   6) (integer) 0  # 该消费组没有正在处理的消息


消费
	Stream提供了xreadgroup指令可以进行消费组的组内消费，需要提供消费组名称、消费者名称和起始消息ID。它同xread一样，也可以阻塞等待新消息。
	读到新消息后，对应的消息ID就会进入消费者的PEL(正在处理的消息)结构里，客户端处理完毕后使用xack指令通知服务器，本条消息已经处理完毕，该消息ID就会从PEL中移除。
	# >号表示从当前消费组的last_delivered_id后面开始读
	# 每当消费者读取一条消息，last_delivered_id变量就会前进
	127.0.0.1:6379> xreadgroup GROUP cg1 c1 count 1 streams codehole >
	1) 1) "codehole"
	   2) 1) 1) 1527851486781-0
			 2) 1) "name"
				2) "laoqian"
				3) "age"
				4) "30"
	127.0.0.1:6379> xreadgroup GROUP cg1 c1 count 1 streams codehole >
	1) 1) "codehole"
	   2) 1) 1) 1527851493405-0
			 2) 1) "name"
				2) "yurui"
				3) "age"
				4) "29"
	127.0.0.1:6379> xreadgroup GROUP cg1 c1 count 2 streams codehole >
	1) 1) "codehole"
	   2) 1) 1) 1527851498956-0
			 2) 1) "name"
				2) "xiaoqian"
				3) "age"
				4) "1"
		  2) 1) 1527852774092-0
			 2) 1) "name"
				2) "youming"
				3) "age"
				4) "60"
	# 再继续读取，就没有新消息了
	127.0.0.1:6379> xreadgroup GROUP cg1 c1 count 1 streams codehole >
	(nil)
	# 那就阻塞等待吧
	127.0.0.1:6379> xreadgroup GROUP cg1 c1 block 0 count 1 streams codehole >
	# 开启另一个窗口，往里塞消息
	127.0.0.1:6379> xadd codehole * name lanying age 61
	1527854062442-0
	# 回到前一个窗口，发现阻塞解除，收到新消息了
	127.0.0.1:6379> xreadgroup GROUP cg1 c1 block 0 count 1 streams codehole >
	1) 1) "codehole"
	   2) 1) 1) 1527854062442-0
			 2) 1) "name"
				2) "lanying"
				3) "age"
				4) "61"
	(36.54s)
	127.0.0.1:6379> xinfo groups codehole  # 观察消费组信息
	1) 1) name
	   2) "cg1"
	   3) consumers
	   4) (integer) 1  # 一个消费者
	   5) pending
	   6) (integer) 5  # 共5条正在处理的信息还有没有ack
	2) 1) name
	   2) "cg2"
	   3) consumers
	   4) (integer) 0  # 消费组cg2没有任何变化，因为前面我们一直在操纵cg1
	   5) pending
	   6) (integer) 0
	# 如果同一个消费组有多个消费者，我们可以通过xinfo consumers指令观察每个消费者的状态
	127.0.0.1:6379> xinfo consumers codehole cg1  # 目前还有1个消费者
	1) 1) name
	   2) "c1"
	   3) pending
	   4) (integer) 5  # 共5条待处理消息
	   5) idle
	   6) (integer) 418715  # 空闲了多长时间ms没有读取消息了
	# 接下来我们ack一条消息
	127.0.0.1:6379> xack codehole cg1 1527851486781-0
	(integer) 1
	127.0.0.1:6379> xinfo consumers codehole cg1
	1) 1) name
	   2) "c1"
	   3) pending
	   4) (integer) 4  # 变成了5条
	   5) idle
	   6) (integer) 668504
	# 下面ack所有消息
	127.0.0.1:6379> xack codehole cg1 1527851493405-0 1527851498956-0 1527852774092-0 1527854062442-0
	(integer) 4
	127.0.0.1:6379> xinfo consumers codehole cg1
	1) 1) name
	   2) "c1"
	   3) pending
	   4) (integer) 0  # pel空了
	   5) idle
	   6) (integer) 745505
	   
Stream消息太多怎么办
	127.0.0.1:6379> xlen codehole
	(integer) 5
	127.0.0.1:6379> xadd codehole maxlen 3 * name xiaorui age 1
	1527855160273-0
	127.0.0.1:6379> xlen codehole
	(integer) 3

************************************* redis命令 ******************************************
Redis 字符串命令
下表列出了常用的 redis 字符串命令：
序号	命令及描述
1	SET key value 
设置指定 key 的值
2	GET key 
获取指定 key 的值。
3	GETRANGE key start end 
返回 key 中字符串值的子字符
4	GETSET key value
将给定 key 的值设为 value ，并返回 key 的旧值(old value)。
5	GETBIT key offset
对 key 所储存的字符串值，获取指定偏移量上的位(bit)。
6	MGET key1 [key2..]
获取所有(一个或多个)给定 key 的值。
7	SETBIT key offset value
对 key 所储存的字符串值，设置或清除指定偏移量上的位(bit)。
8	SETEX key seconds value
将值 value 关联到 key ，并将 key 的过期时间设为 seconds (以秒为单位)。
9	SETNX key value
只有在 key 不存在时设置 key 的值。
10	SETRANGE key offset value
用 value 参数覆写给定 key 所储存的字符串值，从偏移量 offset 开始。
11	STRLEN key
返回 key 所储存的字符串值的长度。
12	MSET key value [key value ...]
同时设置一个或多个 key-value 对。
13	MSETNX key value [key value ...] 
同时设置一个或多个 key-value 对，当且仅当所有给定 key 都不存在。
14	PSETEX key milliseconds value
这个命令和 SETEX 命令相似，但它以毫秒为单位设置 key 的生存时间，而不是像 SETEX 命令那样，以秒为单位。
15	INCR key
将 key 中储存的数字值增一。
16	INCRBY key increment
将 key 所储存的值加上给定的增量值（increment） 。
17	INCRBYFLOAT key increment
将 key 所储存的值加上给定的浮点增量值（increment） 。
18	DECR key
将 key 中储存的数字值减一。
19	DECRBY key decrement
key 所储存的值减去给定的减量值（decrement） 。
20	APPEND key value
如果 key 已经存在并且是一个字符串， APPEND 命令将 value 追加到 key 原来的值的末尾。




Redis keys 命令
下表给出了与 Redis 键相关的基本命令：
序号	命令及描述
1	DEL key
该命令用于在 key 存在时删除 key。
2	DUMP key 
序列化给定 key ，并返回被序列化的值。
3	EXISTS key 
检查给定 key 是否存在。
4	EXPIRE key seconds
为给定 key 设置过期时间。
5	EXPIREAT key timestamp 
EXPIREAT 的作用和 EXPIRE 类似，都用于为 key 设置过期时间。 不同在于 EXPIREAT 命令接受的时间参数是 UNIX 时间戳(unix timestamp)。
6	PEXPIRE key milliseconds 
设置 key 的过期时间以毫秒计。
7	PEXPIREAT key milliseconds-timestamp 
设置 key 过期时间的时间戳(unix timestamp) 以毫秒计
8	KEYS pattern 
查找所有符合给定模式( pattern)的 key 。
9	MOVE key db 
将当前数据库的 key 移动到给定的数据库 db 当中。
10	PERSIST key 
移除 key 的过期时间，key 将持久保持。
11	PTTL key 
以毫秒为单位返回 key 的剩余的过期时间。
12	TTL key 
以秒为单位，返回给定 key 的剩余生存时间(TTL, time to live)。
13	RANDOMKEY 
从当前数据库中随机返回一个 key 。
14	RENAME key newkey 
修改 key 的名称
15	RENAMENX key newkey 
仅当 newkey 不存在时，将 key 改名为 newkey 。
16	TYPE key 
返回 key 所储存的值的类型。




Redis hash 命令
下表列出了 redis hash 基本的相关命令：
序号	命令及描述
1	HDEL key field2 [field2] 
删除一个或多个哈希表字段
2	HEXISTS key field 
查看哈希表 key 中，指定的字段是否存在。
3	HGET key field 
获取存储在哈希表中指定字段的值。
4	HGETALL key 
获取在哈希表中指定 key 的所有字段和值
5	HINCRBY key field increment 
为哈希表 key 中的指定字段的整数值加上增量 increment 。
6	HINCRBYFLOAT key field increment 
为哈希表 key 中的指定字段的浮点数值加上增量 increment 。
7	HKEYS key 
获取所有哈希表中的字段
8	HLEN key 
获取哈希表中字段的数量
9	HMGET key field1 [field2] 
获取所有给定字段的值
10	HMSET key field1 value1 [field2 value2 ] 
同时将多个 field-value (域-值)对设置到哈希表 key 中。
11	HSET key field value 
将哈希表 key 中的字段 field 的值设为 value 。
12	HSETNX key field value 
只有在字段 field 不存在时，设置哈希表字段的值。
13	HVALS key 
获取哈希表中所有值
14	HSCAN key cursor [MATCH pattern] [COUNT count] 
迭代哈希表中的键值对。	




Redis 集合命令
下表列出了 Redis 集合基本命令：
序号	命令及描述
1	SADD key member1 [member2] 
向集合添加一个或多个成员
2	SCARD key 
获取集合的成员数
3	SDIFF key1 [key2] 
返回给定所有集合的差集
4	SDIFFSTORE destination key1 [key2] 
返回给定所有集合的差集并存储在 destination 中
5	SINTER key1 [key2] 
返回给定所有集合的交集
6	SINTERSTORE destination key1 [key2] 
返回给定所有集合的交集并存储在 destination 中
7	SISMEMBER key member 
判断 member 元素是否是集合 key 的成员
8	SMEMBERS key 
返回集合中的所有成员
9	SMOVE source destination member 
将 member 元素从 source 集合移动到 destination 集合
10	SPOP key 
移除并返回集合中的一个随机元素
11	SRANDMEMBER key [count] 
返回集合中一个或多个随机数
12	SREM key member1 [member2] 
移除集合中一个或多个成员
13	SUNION key1 [key2] 
返回所有给定集合的并集
14	SUNIONSTORE destination key1 [key2] 
所有给定集合的并集存储在 destination 集合中
15	SSCAN key cursor [MATCH pattern] [COUNT count] 
迭代集合中的元素