------------symfony install
composer create-project symfony/framework-standard-edition my_project_name
 
------------symfony4 install
	composer create-project symfony/website-skeleton my-project

------------Annotation Routes
	 composer require annotations
	 
	 
	 
------------The bin/console Command
	php bin/console
	php bin/console debug:router
	
------------package
// composer config -g repo.packagist composer https://packagist.phpcomposer.com
composer require symfony/asset


------------------------------------------------------------------
------------Databases and the Doctrine ORM------------			 -
document url:https://symfony.com/doc/current/doctrine.html		 -
------------------------------------------------------------------
Installing Doctrine
	composer require symfony/orm-pack
	composer require symfony/maker-bundle --dev

配置数据库信息
	.env (根目录)
	DATABASE_URL="mysql://db_user:db_password@127.0.0.1:3306/db_name"
	
使用命令生成数据库
	php bin/console doctrine:database:create
	
Creating an Entity Class 创建实体类
	php bin/console make:entity
	创建过程
		Class name of the entity to create or update:
		> Product

		 to stop adding fields):
		> name

		Field type (enter ? to see all types) [string]:
		> string

		Field length [255]:
		> 255

		Can this field be null in the database (nullable) (yes/no) [no]:
		> no
	创建的文件：src/Entity/Product.php
	
Migrations: Creating the Database Tables/Schema 迁移：创建数据库表/架构
	#以下命令创建迁移文件：src/Migrations/Version20190227020055.php
	 php bin/console make:migration
	#以下命令执行迁移文件
	 php bin/console doctrine:migrations:migrate

Migrations & Adding more Fields 迁移和添加更多字段
	php bin/console make:entity

		Class name of the entity to create or update
		> Product

		 to stop adding fields):
		> description

		Field type (enter ? to see all types) [string]:
		> text

		Can this field be null in the database (nullable) (yes/no) [no]:
		> no

		 to stop adding fields):
		>
		(press enter again to finish)
	然后生成迁移文件和执行
	
Persisting Objects to the Database 将对象保留到数据库
	php bin/console make:controller ProductController
	生成的文件//src/Controller/ProductController.php
	
生成迁移
	php bin/console doctrine:migrations:migrate
查询：
	php bin/console doctrine:query:sql 'SELECT * FROM product'
	
Dummy Data Fixtures
	composer require doctrine/doctrine-fixtures-bundle --dev
	
	php bin/console make:fixtures
		The class name of the fixtures to create (e.g. AppFixtures):
		> ProductFixture
	创建的文件// src/DataFixtures/ProductFixture.php
	
	//Empty the database and reload all the fixture classes：
	//会清空数据库，并生成ProductFixture.php里的数据
	php bin/console doctrine:fixtures:load


其他资料：
https://www.doctrine-project.org/projects/doctrine-orm/en/latest/tutorials/getting-started.html#getting-started-with-doctrine

	
------------------------------------------------------------------
------------ SonataAdminBundle 						 -------------
https://symfony.com/doc/current/bundles/SonataAdminBundle/index.html
------------------------------------------------------------------

1.1、安装
	composer require sonata-project/admin-bundle
	
1.2、下载存储包
	安装SonataDoctrineORMAdminBundle
		1.1。下载包
		composer require sonata-project/doctrine-orm-admin-bundle
		1.2。启用捆绑
		接下来，bundles.php如果文件中尚未启用，请务必启用它们：
		// config/bundles.php
		return [
			// ...
			Sonata\DoctrineORMAdminBundle\SonataDoctrineORMAdminBundle::class => ['all' => true],
		];
		
1.2、下载存储包
1.2、下载存储包
1.2、下载存储包
	

------------------------------------------------------------------
------------ How to Work with Doctrine Associations / Relations 
------------------------------------------------------------------
https://symfony.com/doc/current/doctrine/associations.html


------------------------------------------------------------------
------------ symfony4常用依赖列表
------------------------------------------------------------------
composer require annotations

composer require symfony/orm-pack
composer require symfony/maker-bundle --dev

composer require doctrine/doctrine-fixtures-bundle --dev

composer require symfony/yaml

composer require predis/predis

//swagger
composer require nelmio/api-doc-bundle
//使用：https://symfony.com/doc/master/bundles/NelmioApiDocBundle/index.html


//security
composer require symfony/ldap
//https://symfony.com/doc/current/security/ldap.html
//需要开启php ldap扩展

//FOSRestBundle
composer require friendsofsymfony/rest-bundle


https://packagist.org/packages/jms/serializer-bundle
composer require jms/serializer-bundle

------------------------------------------------------------------
------------ symfony4常用库 
------------------------------------------------------------------
use Symfony\Component\HttpFoundation\Response;
use Symfony\Component\HttpFoundation\Request;
use Symfony\Bundle\FrameworkBundle\Controller\AbstractController;
use Symfony\Component\Yaml\Yaml;
use Symfony\Component\Routing\Annotation\Route;


//--------验证
use Symfony\Component\Validator\Validation;
use Symfony\Component\Validator\Constraints\Length;
//非空
use Symfony\Component\Validator\Constraints\NotBlank;

//--------路由
use FOS\RestBundle\Controller\AbstractFOSRestController;
use FOS\RestBundle\Controller\Annotations as Rest;
//路由格式
/**
 * @Rest\Get("/", name="farms_pigs_feedkind_index")
 * @param Request $request
 * @return \Symfony\Component\HttpFoundation\JsonResponse
 */
/**
 * @Rest\Post("/", name="farms_pigs_feedkind_index")
 * @param Request $request
 * @return \Symfony\Component\HttpFoundation\JsonResponse
 */

use Symfony\Component\Routing\Annotation\Route;
 
------------------------------------------------------------------
------------ How to Work with Doctrine Associations / Relations 
------------------------------------------------------------------

------------------------------------------------------------------
------------ symfony/Doctrine API
------------------------------------------------------------------ 

------------------------------------------------------------------
------------ symfony 开发备忘录
------------------------------------------------------------------ 
$request->attributes->get('_route') //获取当前访问url的别名


------------------------------------------------------------------
------------ bin/console 常用命令解释 
------------------------------------------------------------------ 
打印配置
bin/console config:dump-reference

安全配置
bin/console config:dump-reference security

------------------------------------------------------------------
------------ 文件上传 vich/uploader-bundle
------------------------------------------------------------------ 
install: composer require vich/uploader-bundle


https://packagist.org/packages/vich/uploader-bundle
https://github.com/dustin10/VichUploaderBundle 

------------------------------------------------------------------
------------ symfony框架如何关联bundle里实体
------------------------------------------------------------------ 
在bundle的build方法添加
	<?php

namespace Xiaokang\Bundle\ContractOrmBundle;

use Doctrine\Bundle\DoctrineBundle\DependencyInjection\Compiler\DoctrineOrmMappingsPass;
use Symfony\Component\DependencyInjection\ContainerBuilder;
use Symfony\Component\HttpKernel\Bundle\Bundle;
use function realpath;
use Xiaokang\Bundle\ContractOrmBundle\DependencyInjection\Compiler\ContractPass;
use Xiaokang\Bundle\ContractOrmBundle\DependencyInjection\ContractOrmExtension;

class ContractOrmBundle extends Bundle
{

    public function build(ContainerBuilder $container)
    {
        parent::build($container);

        $container->addCompilerPass(new ContractPass());
		//映射方法
        $container->addCompilerPass(DoctrineOrmMappingsPass::createAnnotationMappingDriver(
            ['Xiaokang\\Bundle\\ContractOrmBundle\\Entity'],
            [realpath(__DIR__) . '/Entity']
        ));
    }
}

------------------------------------------------------------------
------------ 如何在bundle里给服务添加方法
------------------------------------------------------------------ 
实例：
<?php
namespace Xiaokang\Bundle\ContractOrmBundle\DependencyInjection\Compiler;
use Symfony\Component\DependencyInjection\Compiler\CompilerPassInterface;
use Symfony\Component\DependencyInjection\ContainerBuilder;
use Symfony\Component\DependencyInjection\Reference;
use Xiaokang\Bundle\ContractOrmBundle\Handle\ContractHandle;
class ContractPass implements CompilerPassInterface
{
    public function process(ContainerBuilder $container)
    {
        if (!$container->has('xiaokang.handle.contract')) {
            return;
        }
        $definition = $container->getDefinition('xiaokang.handle.contract');
        $taggedServices = $container->findTaggedServiceIds('contract.entity');
        foreach ($taggedServices as $id => $tags) {
            foreach ($tags as $attributes) {
                $definition->addMethodCall('addContract', [new Reference($id), $attributes]);
            }
        }
    }
}

服务： 
    xiaokang.handle.contract:
        class: 'Xiaokang\Bundle\ContractOrmBundle\Handle\ContractHandle'
        public: false
        autowire: true
		
服务里的方法：
    public function addContract(ContractInterface $contract, array $attributes)
    {
        $contract->setTemplateNo($attributes['template'])->setType($attributes["type"])->setSubdivision($attributes["subdivision"]);
        $this->contracts[$attributes['id']] = $contract;
    }		
------------------------------------------------------------------
------------ symfony/Doctrine DBAL
------------------------------------------------------------------ 
配置资料：
	https://symfony.com/doc/current/reference/configuration/doctrine.html#reference-dbal-configuration
	https://www.doctrine-project.org/projects/doctrine-dbal/en/latest/reference/configuration.html
	https://www.doctrine-project.org/projects/doctrine-dbal/en/latest/reference/introduction.html


Doctrine DBAL配置(packages/doctrine.yaml)
doctrine:
    dbal:
        default_connection:       default
        connections:
            default:
                dbname:           Symfony
                user:             root
                password:         null
                host:             localhost
                server_version:   '5.6'
            customer:
                dbname:           customer
                user:             root
                password:         null
                host:             localhost
                server_version:   '5.7'
项目中的配置
doctrine:
    dbal:
        default_connection: default
        connections:
            default:
                schema_filter: '~^(?!messenger_messages)~'
                url: '%env(resolve:DATABASE_URL)%'
                driver: 'pdo_mysql'
                server_version: '5.7'
                charset: utf8mb4
            yund:
                # configure these for your database server
                url: '%env(resolve:DATABASE_YUND_URL)%'
                driver: 'pdo_mysql'
                server_version: '5.7'
                charset: utf8mb4
------------------------------------------------------------------
------------ symfony/messenger 备忘录
------------------------------------------------------------------
services.yaml:
App\MessageHandler\NotificationHandler:
	autoconfigure: false # 自动加载配置false表示由手动加载配置，由App\Message\Notification生产的消息只能由 App\MessageHandler\NotificationHandler处理消息
	#autoconfigure: true # 自动加载配置true表示，由App\Message\Notification生产的消息 所有的消息处理程序都可以处理，如App\MessageHandler里面的消息处理程序
	tags: [{ name: messenger.message_handler, handle: App\Message\Notification, bus: command.bus }] #bus: command.bus 表示处理方式

#向云贷发出提现请求命令
App\Command\CashCommand:
	autowire: true
	arguments:
		$eventBus: '@event.bus' #以服务参数方式注入（怎么查看服务参数名：bin/console debug:container  | grep bus） ; @表示这个参数是 服务
		$key: 'autoCash' #前面没有加@表示是普通参数
		$token: '0677132d8b221430265b17debec4b7dc'
	tags:
		- { name: 'console.command', command: 'clearing:yundclient-cash'}

messenger.yaml配置:
framework:
    messenger:
        # Uncomment this (and the failed transport below) to send failed messages to this transport for later handling.
        # failure_transport: failed


        default_bus: command.bus
        buses:
            command.bus: # 主要职责为创建
                middleware:
                    - validation
                    - doctrine_transaction
            query.bus: # 主要职责为查询
                middleware:
                    - validation
            event.bus: # 主要职责为更新
                default_middleware: allow_no_handlers
                middleware:
                    - validation

        failure_transport: failed

        transports:
            # https://symfony.com/doc/current/messenger.html#transports
            # async: '%env(MESSENGER_TRANSPORT_DSN)%'
            # failed: 'doctrine://default?queue_name=failed'
            # sync: 'sync://'

            async_priority_high: #异步
                dsn: '%env(MESSENGER_TRANSPORT_DSN)%'
                options:
                    queue_name: high #优先传输级别
                retry_strategy: # 重试配置
                    max_retries: 3
                    delay: 1000
                    multiplier: 2
                    max_delay: 0
            async_priority_low: #异步
                dsn: '%env(MESSENGER_TRANSPORT_DSN)%'
                options:
                    queue_name: low #优先传输级别

            sync: 'sync://' #同步
			
			async:
                dsn: '%env(MESSENGER_TRANSPORT_DSN)%'
                options:
                    queue_name: async
                retry_strategy:
                    max_retries: 3 #重试次数
                    delay: 60000   #延迟60秒
                    multiplier: 2  #在每次延迟的基础上乘以2，如第一次60s,第二次60*2，第三次60*2*2 ... 但总时间不超过最大延迟 max_delay
                    max_delay: 300000 #最大延迟5分钟

            failed: 'doctrine://default?queue_name=failed'

        routing:
            # Route your messages to the transports
            # 'App\Message\YourMessage': async

            'App\Message\Notification':  sync
            'App\Message\ClearingNotification':  async_priority_high
            'App\Message\OtherNotification':  async_priority_high
            'App\Message\UnknownNotification':  async_priority_low



------------------------------------------------------------------
------------ twig 
------------------------------------------------------------------
twig 模板中 path 函数的使用
{{ path('article_show', { 'slug': article.slug }) }}

使用path函数带有多个参数时会出现把&转义成&amp;的解决：使用raw原样输出
{{ path('upload_img_file_view', {'a':1, 'b':2}) }} =》/upload/img/file?a=1&amp;b=2
{{ path('upload_img_file_view', {'a':1, 'b':2})|raw }}

------------------------------------------------------------------
------------ 动态添加服务 
------------------------------------------------------------------
    public function create(ContainerBuilder $container, $id, $config, $userProvider, $defaultEntryPoint)
    {
        $providerId = 'security.authentication.provider.personal_four_elements.' . $id;
        $provider = new Definition(PersonalFourElementsProvider::class);
        $provider->addArgument(new Reference($userProvider));
        $provider->addArgument($config['provider_key']);
        $container->setDefinition($providerId, $provider);

        $listenerId = 'security.authentication.listener.personal_four_elements.'.$id;
        $listener = new Definition(PersonalFourElementsListener::class);
        $listener->addArgument(new Reference('security.token_storage'));
        $listener->addArgument(new Reference('security.authentication.manager'));
        $listener->addArgument($config['provider_key']);
        $listener->addArgument($config['user_class']);
        $container->setDefinition($listenerId, $listener);

        return [$providerId, $listenerId, $defaultEntryPoint];
    }


	public function getKey()
	{
		return 'personal_four_elements'; //监听防火墙名称，在security里，如：
		
		//        h5_usercenter:
		//			personal_four_elements:
		//				user_class: Xiaokang\Bundle\ContractAuthenticationBundle\Entity\AuthUser
	}
	
------------------------------------------------------------------
------------ 登陆问题 
------------------------------------------------------------------	
1、用户登陆时，输入错误密码后再次输入正确密码未跳转到referer页面
解决：
	控制器：
	public function login(Request $request, CsrfTokenManagerInterface $csrfTokenManager)
    {
        $data = $this->login_parameter($request, $csrfTokenManager);
        $session = $data['session'];
        return $this->render('login/account_login.html.twig', [
            '_mobile_pwd_token' => $data['csrfToken'],
            '_target_path' => $request->query->has('_target_path') ? $request->get('_target_path') : $request->headers->get('referer'), //处理跳转
            'error' => isset($data['error']) ? $data['error']->getMessage() : '',
            'last_username'=>(null === $session) ? '' : $session->get(Security::LAST_USERNAME)
        ]);
    }
	登陆表单模板：
	<input type="hidden" name="_target_path" value="{{ _target_path }}"/>
	<input type="hidden" name="_failure_path" value="{{ path('sign.in', {'_target_path': _target_path}) }}"/>

2、当用户登陆后，打开投诉建议窗口，填写数据，然后再打开另一个页面，退出登录，然后提交投诉建议，这里检测到未登录，应该跳转登录
解决：在防火墙添加入口点，通过$request->isXmlHttpRequest()判断是否是ajax请求，如果是则重定向到指定url；在客户端用ajax里error:function(e){处理跳转逻辑}
	security配置：
		entry_point: 'App\EntryPoint\XkxdWebEntryPoint'
	services配置：
		    App\EntryPoint\XkxdWebEntryPoint:
			public: true
			arguments:
			- '@security.http_utils'
			- 'sign.in' #登陆路由名称
	入口点程序：
		<?php
		namespace App\EntryPoint;
		use Symfony\Component\HttpFoundation\JsonResponse;
		use Symfony\Component\HttpFoundation\RedirectResponse;
		use Symfony\Component\HttpFoundation\Request;
		use Symfony\Component\Security\Core\Exception\AuthenticationException;
		use Symfony\Component\Security\Http\EntryPoint\AuthenticationEntryPointInterface;
		use Symfony\Component\Security\Http\HttpUtils;
		class XkxdWebEntryPoint implements AuthenticationEntryPointInterface
		{
			private $httpUtils;
			private $loginPath;
			public function __construct(HttpUtils $httpUtils, string $loginPath)
			{
				$this->httpUtils = $httpUtils;
				$this->loginPath = $loginPath;
			}
			public function start(Request $request, AuthenticationException $authException = null)
			{
				$uri = $this->httpUtils->generateUri($request, $this->loginPath);
				if ($request->isXmlHttpRequest()){
					return JsonResponse::create(['url'=>$uri], 302);
				}
				return new RedirectResponse($uri,302) ;
			}
		}
	ajax程序：
		error: function (e) {
			if ((e.status == 302 || e.status == 301) && e.responseJSON.url != null){
				window.location.href = e.responseJSON.url;
			}
			//...
		}
	
	
------------------------------------------------------------------
------------ 常见错误列表 
------------------------------------------------------------------
1、Catchable Fatal Error: Object of class App\Entity\User could not be converted to string
解决：
	configureFormFields：
		->add('author', EntityType::class, [
                'class' => User::class,
                'choice_label' => 'name',
            ])
			
	configureDatagridFilters：
		->add('author', null, [], EntityType::class, [
                'class' => User::class,
                'choice_label' => 'name',
            ])

2、An exception has been thrown during the rendering of a template ("You must define an `associated_property` option or create a `App\Entity\User::__toString` method to the field option author from service app.admin.post is "). 
解决：
	configureListFields：
		->add('author.name') //关系属性 ManyToOne-> private $author;
		
3、No encoder has been configured for account （没有为帐户配置编码器）
解决：
	security:
		encoders:
			Symfony\Component\Security\Core\User\User: plaintext
			FOS\UserBundle\Model\UserInterface: sha512
			//如下案例
			Xiaokang\UserCenter\Bundle\Yund1UserLoginBundle\Entity\YundUser:
				algorithm: bcrypt